<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="XtsMover_TestSuite" Id="{35b3f83a-ddd6-49c7-a80a-724734d90825}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK XtsMover_TestSuite EXTENDS TestSuite<TestSuiteParameter.MaxTestCount>
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[MoverAcceptsEnableCommand_Test();
MoverAcceptsDisableCommand_Test();
MoverAcceptsGoodGap_Test();
MoverAcceptsModuloBackwardMove_Test();
MoverAcceptsModuloForwardMove_Test();
MoverAcceptsModuloForwardOnlyCommand_Test();
MoverAcceptsNonModuloMoveCommand_Test();
MoverRejectsDisableCommand_Test();
MoverRejectsEnableCommand_Test();
MoverRejectsGapLow_Test();
MoverRejectsHighVeloCommand_Test();
MoverRejectsNegVeloCommand_Test();
MoverRejectsResetWithNoError_Test();
MoverRejectsActivateZeroTrack_Test();
MoverRejectsUnusedHighIndexTrack_Test();
MoverRejectsActivateTrackWhileMoving_Test();
MoverRejectsZeroRefSysWhenMoving_Test();
MoverAcceptsZeroRefSysSet_Test();
MoverRejectsCycleCallWithNoAxisRef_Test();
MoverReportsMovingCorrectly_Test();
MoverReportsMoverOutsidePosWindow_Test();
MoverReportsPositionInWindow_Test();
MoverAcceptsTrackRegistration_Test();
MoverRejectsNullTrackRegister_Test();
MoverRejectsDoubleTrackRegister_Test();
MoverRejectsPosCheckwithNoTrack_Test();
MoverRejectsArriveCommandIfNotLeft_Test();
MoverRejectsArriveCommandIfNoInterface_Test();
MoverRejectsLeaveCommandWithNoInterface_Test();
MoverRejectsLeaveCommandIfMoving_Test();
MoverAcceptsMoverLeaveCommand_Test();
MoverAcceptsArriveCommand_Test();]]></ST>
    </Implementation>
    <Method Name="MoverAcceptsArriveCommand_Test" Id="{22e6417c-6fbd-4ac0-9667-5e84052cd4a6}">
      <Declaration><![CDATA[METHOD MoverAcceptsArriveCommand_Test
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
VAR
	testMover : stubMover;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	Actual := SUCCEEDED(testMover.TriggerMoverArrive());
	Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverAcceptsDisableCommand_Test" Id="{f74263e1-f8f8-472b-b7d9-77e272f7e657}">
      <Declaration><![CDATA[METHOD MoverAcceptsDisableCommand_Test
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
VAR
	testMover : stubMover;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	testMover.setEnabled();
	Actual := SUCCEEDED( testMover.DisableMover());
	Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverAcceptsEnableCommand_Test" Id="{716146c2-e85b-4cfe-8ba6-0d5e0d358526}">
      <Declaration><![CDATA[METHOD MoverAcceptsEnableCommand_Test : BOOL
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
VAR
	testMover : stubMover;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	testMover.setDisabled();
	Actual := SUCCEEDED( testMover.EnableMover());
	Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverAcceptsGoodGap_Test" Id="{a49e7a7f-b905-403f-b266-dc77e02f27a1}">
      <Declaration><![CDATA[METHOD MoverAcceptsGoodGap_Test : BOOL
VAR_INST
	Expected : mc_lreal := 120.0;
	Actual	 : mc_lreal;
END_VAR
VAR
	testMover : XtsMover;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	testMover.Gap := 120.0;
	Actual := testMover.Gap;
	Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverAcceptsModuloBackwardMove_Test" Id="{f01ead45-02a1-4332-9b35-9dc1d8e90aa5}">
      <Declaration><![CDATA[METHOD MoverAcceptsModuloBackwardMove_Test
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
VAR
	testMover : stubMover;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	testMover.PositiveDirectionOnly := FALSE;
	Actual := testMover.MoveTo(RequiredPosition := - 100.0,
											MoveVelocity := 10.0,
											NonModuloMove := FALSE) = 4;
	Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverAcceptsModuloForwardMove_Test" Id="{07afab8a-841c-4fbe-b344-5bbfa5b521c6}">
      <Declaration><![CDATA[METHOD MoverAcceptsModuloForwardMove_Test
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
VAR
	testMover : stubMover;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	testMover.PositiveDirectionOnly := FALSE;
	Actual := testMover.MoveTo(RequiredPosition := 100.0,
											MoveVelocity := 10.0,
											NonModuloMove := FALSE) = 3;
	Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverAcceptsModuloForwardOnlyCommand_Test" Id="{a64dceeb-4c24-4d38-9111-5e79894157e6}">
      <Declaration><![CDATA[METHOD MoverAcceptsModuloForwardOnlyCommand_Test
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
VAR
	testMover : stubMover;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	testMover.PositiveDirectionOnly := TRUE;
	Actual := testMover.MoveTo(RequiredPosition := 100.0,
											MoveVelocity := 10.0,
											NonModuloMove := FALSE) = 2;
	Test(__POUNAME()).AssertEqual(Expected, Actual);
	testMover.PositiveDirectionOnly := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverAcceptsMoverLeaveCommand_Test" Id="{63a4cba1-4cae-4219-85d1-5681444a678f}">
      <Declaration><![CDATA[METHOD MoverAcceptsMoverLeaveCommand_Test
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
VAR
	testMover : stubMover;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	Actual := SUCCEEDED(testMover.TriggerMoverLeave());
	Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverAcceptsNonModuloMoveCommand_Test" Id="{2b00f225-8b8d-421c-b2e9-7d3989986ec2}">
      <Declaration><![CDATA[METHOD MoverAcceptsNonModuloMoveCommand_Test
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
VAR
	testMover : stubMover;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	Actual := testMover.MoveTo(RequiredPosition := 100.0,
											MoveVelocity := 10.0,
											NonModuloMove := TRUE) = 1;
	Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverAcceptsTrackRegistration_Test" Id="{25290b46-6231-42fb-a203-79bee776a0f7}">
      <Declaration><![CDATA[METHOD MoverAcceptsTrackRegistration_Test
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
VAR
	teststubMover : stubMover;
	stubTrack : XtsTrack;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	Actual := SUCCEEDED(teststubMover.RegisterTracks(stubTrack));
	Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverAcceptsZeroRefSysSet_Test" Id="{df519fe2-b659-439f-acdf-e643f50ea61d}">
      <Declaration><![CDATA[METHOD MoverAcceptsZeroRefSysSet_Test
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
VAR
	testMover : stubMover;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	testMover.setEnabled();
	testMover.setStationary();
	Actual := SUCCEEDED( testMover.ActivateZeroReferenceSystem());
	Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverRejectsActivateTrackWhileMoving_Test" Id="{68602ec7-eeb2-48cd-a3a7-de01a20ff851}">
      <Declaration><![CDATA[METHOD MoverRejectsActivateTrackWhileMoving_Test
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
VAR
	teststubMover : stubMover;
	stubTrack : XtsTrack;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	teststubMover.RegisterTracks(stubTrack);
	teststubMover.setMoving();
	Actual := teststubMover.ActivateTrack(Track := 1) = -3;
	Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverRejectsActivateZeroTrack_Test" Id="{63f382c0-31c1-4b25-adcd-c20a2309c7b9}">
      <Declaration><![CDATA[METHOD MoverRejectsActivateZeroTrack_Test : BOOL
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
VAR
	testMover : XtsMover;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	Actual := testMover.ActivateTrack(Track := 0) = -1;
	Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverRejectsArriveCommandIfNoInterface_Test" Id="{f97f0d65-3de3-442e-93b9-a0e1236e2cf9}">
      <Declaration><![CDATA[METHOD MoverRejectsArriveCommandIfNoInterface_Test
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
VAR
	testMover : stubMover;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	Actual := testMover.TriggerMoverArrive() = -1;
	Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverRejectsArriveCommandIfNotLeft_Test" Id="{0e69579f-6dca-4b96-be0e-fb9b4ad240f0}">
      <Declaration><![CDATA[METHOD MoverRejectsArriveCommandIfNotLeft_Test
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
VAR
	testMover : stubMover;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	Actual := testMover.TriggerMoverArrive() = -2;
	Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverRejectsCycleCallWithNoAxisRef_Test" Id="{fb3f91ca-683c-4eda-a124-b2b3567eaec3}">
      <Declaration><![CDATA[METHOD MoverRejectsCycleCallWithNoAxisRef_Test : BOOL
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
VAR
	testMover : XtsMover;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	Actual := FAILED( testMover.Cycle());
	Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverRejectsDisableCommand_Test" Id="{61adacd1-bbb3-4810-9e81-807401845494}">
      <Declaration><![CDATA[METHOD MoverRejectsDisableCommand_Test : BOOL
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
VAR
	testMover : stubMover;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	testMover.setDisabled();
	Actual := FAILED( testMover.DisableMover());
	Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverRejectsDoubleTrackRegister_Test" Id="{b3316b94-62df-4481-b90b-e4fdb0a8771a}">
      <Declaration><![CDATA[METHOD MoverRejectsDoubleTrackRegister_Test
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
VAR
	teststubMover : stubMover;
	stubTrack : XtsTrack;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	teststubMover.RegisterTracks(stubTrack);
	Actual := teststubMover.RegisterTracks(stubTrack) = -2;
	Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverRejectsEnableCommand_Test" Id="{27df6825-6795-4e10-9d4e-f3f97002c790}">
      <Declaration><![CDATA[METHOD MoverRejectsEnableCommand_Test
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
VAR
	testMover : stubMover;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	testMover.setEnabled();
	Actual := FAILED( testMover.EnableMover());
	Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverRejectsGapLow_Test" Id="{6530a17d-1991-47b3-b4cb-06ac96089734}">
      <Declaration><![CDATA[METHOD MoverRejectsGapLow_Test : BOOL
VAR_INST
	Expected : mc_lreal := 100.0;
	Actual	 : mc_lreal;
END_VAR
VAR
	testMover : XtsMover;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	testMover.Gap := 25.0;
	Actual := testMover.Gap;
	Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverRejectsHighVeloCommand_Test" Id="{5ee085d8-22d2-44c9-b967-7741b9170bcb}">
      <Declaration><![CDATA[METHOD MoverRejectsHighVeloCommand_Test : BOOL
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
VAR
	testMover : XtsMover;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	Actual := FAILED( testMover.MoveTo(100.0,5000.0,true));
	Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverRejectsLeaveCommandIfMoving_Test" Id="{8be2157e-7677-4ad4-bee0-dd1b09dcf28b}">
      <Declaration><![CDATA[METHOD MoverRejectsLeaveCommandIfMoving_Test
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
VAR
	testMover : stubMover;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	testMover.setMoving();
	Actual := testMover.TriggerMoverLeave() = -3;
	Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverRejectsLeaveCommandWithNoInterface_Test" Id="{c60f29b7-4527-4eb3-87bf-691b0f2f48d3}">
      <Declaration><![CDATA[METHOD MoverRejectsLeaveCommandWithNoInterface_Test
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
VAR
	testMover : stubMover;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	Actual := testMover.TriggerMoverLeave() = -1;
	Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverRejectsNegVeloCommand_Test" Id="{64cadcb0-5bf1-4cfd-9d6d-2fa99dffcb0d}">
      <Declaration><![CDATA[METHOD MoverRejectsNegVeloCommand_Test : BOOL
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
VAR
	testMover : XtsMover;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	Actual := FAILED( testMover.MoveTo(100.0,-1.0,TRUE));
	Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverRejectsNullTrackRegister_Test" Id="{11ba333d-6ca9-4e64-ab8f-04293121d125}">
      <Declaration><![CDATA[METHOD MoverRejectsNullTrackRegister_Test
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
VAR
	teststubMover : stubMover;
	stubTrack : I_XtsTrack;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	Actual := teststubMover.RegisterTracks(stubTrack) = -1;
	Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverRejectsPosCheckwithNoTrack_Test" Id="{8942dc59-e1b2-4a12-8224-cfcb7ed3188c}">
      <Declaration><![CDATA[METHOD MoverRejectsPosCheckwithNoTrack_Test
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
VAR
	testMover : stubMover;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	Actual := NOT testMover.isMoverAtPosition(0.0);
	Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverRejectsResetWithNoError_Test" Id="{f5425bf8-2274-4dca-931b-4651d9a2101b}">
      <Declaration><![CDATA[METHOD MoverRejectsResetWithNoError_Test : BOOL
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
VAR
	testMover : XtsMover;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	Actual := FAILED( testMover.Reset());
	Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverRejectsUnusedHighIndexTrack_Test" Id="{aa50061a-5df7-4dfa-887e-ad5a41146b98}">
      <Declaration><![CDATA[METHOD MoverRejectsUnusedHighIndexTrack_Test
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
VAR
	testMover : stubMover;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	testMover.setStationary();
	Actual := testMover.ActivateTrack(Track := 5) = -4;
	Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverRejectsZeroRefSysWhenMoving_Test" Id="{bb153479-b73c-47fe-b92e-239b0e5bd0d4}">
      <Declaration><![CDATA[METHOD MoverRejectsZeroRefSysWhenMoving_Test
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
VAR
	testMover : stubMover;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	testMover.setEnabled();
	testMover.setMoving();
	Actual := testMover.ActivateZeroReferenceSystem() = -2;
	Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverReportsMoverOutsidePosWindow_Test" Id="{43848fba-d9e9-410c-98a3-0bba057248aa}">
      <Declaration><![CDATA[METHOD MoverReportsMoverOutsidePosWindow_Test
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
VAR
	testMover : stubMover;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	testMover.setAPosition(301.2);
	Actual := NOT testMover.isMoverAtPosition(300.0);
	Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverReportsMovingCorrectly_Test" Id="{2f7e6e28-944b-4700-8c41-7d154cade07a}">
      <Declaration><![CDATA[METHOD MoverReportsMovingCorrectly_Test
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
VAR
	testMover : stubMover;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	testMover.setMoving();
	Actual := NOT testMover.isMoverStationary();
	testMover.setStationary();
	Actual := Actual AND testMover.isMoverStationary();
	Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverReportsPositionInWindow_Test" Id="{53afb953-412d-4aa5-b491-ac154905df0d}">
      <Declaration><![CDATA[METHOD MoverReportsPositionInWindow_Test
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
VAR
	testMover : stubMover;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	testMover.setAPosition(301.2);
	Actual := testMover.isMoverAtPosition(302.0);
	Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>