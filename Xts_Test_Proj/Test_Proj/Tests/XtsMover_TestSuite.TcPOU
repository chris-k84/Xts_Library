<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="XtsMover_TestSuite" Id="{35b3f83a-ddd6-49c7-a80a-724734d90825}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK XtsMover_TestSuite
VAR
	testMover : XtsMoverAxis;
	ReRun: BOOL;
	stubTrack : XtsTrack;
	stubITrack: Xts_Library.I_XtsTrack := stubTrack;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[MoverRejectsCycleCallWithNoAxisRef_Test();
MoverAcceptsEnableCommand_Test();
MoverRejectsDisableCommand_Test();
MoverRejectsGapLow_Test();
MoverAcceptsGoodGap_Test();
MoverRejectsHighVeloCommand_Test();
MoverRejectsNegVeloCommand_Test();
MoverRejectsResetWithNoError_Test();
MoverRejectsActiavteTrackWithInvalidInterface_Test();
MoverRejectsActivateTrackInvalidOTCID_Test();
IF ReRun THEN
	TestSuite.ReRunTests();
	ReRun := FALSE;
END_IF]]></ST>
    </Implementation>
    <Method Name="MoverAcceptsEnableCommand_Test" Id="{716146c2-e85b-4cfe-8ba6-0d5e0d358526}">
      <Declaration><![CDATA[METHOD MoverAcceptsEnableCommand_Test : BOOL
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF TestSuite.Test(__POUNAME()).ExecuteTest() THEN
	Actual := SUCCEEDED( testMover.EnableMover());
	TestSuite.Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverAcceptsGoodGap_Test" Id="{a49e7a7f-b905-403f-b266-dc77e02f27a1}">
      <Declaration><![CDATA[METHOD MoverAcceptsGoodGap_Test : BOOL
VAR_INST
	Expected : mc_lreal := 120.0;
	Actual	 : mc_lreal;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF TestSuite.Test(__POUNAME()).ExecuteTest() THEN
	testMover.Gap := 120.0;
	Actual := testMover.Gap;
	TestSuite.Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverRejectsActiavteTrackWithInvalidInterface_Test" Id="{63f382c0-31c1-4b25-adcd-c20a2309c7b9}">
      <Declaration><![CDATA[METHOD MoverRejectsActiavteTrackWithInvalidInterface_Test : BOOL
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF TestSuite.Test(__POUNAME()).ExecuteTest() THEN
	Actual := FAILED( testMover.ActivateTrack(NewTrack := 16#1010E2, Track := 0));
	TestSuite.Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverRejectsActivateTrackInvalidOTCID_Test" Id="{2fd27368-4a82-43e0-950b-41f666bdc2fa}">
      <Declaration><![CDATA[METHOD MoverRejectsActivateTrackInvalidOTCID_Test : BOOL
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF TestSuite.Test(__POUNAME()).ExecuteTest() THEN
	Actual := FAILED( testMover.ActivateTrack(NewTrack := 0,Track := stubITrack));
	TestSuite.Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverRejectsCycleCallWithNoAxisRef_Test" Id="{fb3f91ca-683c-4eda-a124-b2b3567eaec3}">
      <Declaration><![CDATA[METHOD MoverRejectsCycleCallWithNoAxisRef_Test : BOOL
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF TestSuite.Test(__POUNAME()).ExecuteTest() THEN
	Actual := FAILED( testMover.Cycle());
	TestSuite.Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverRejectsDisableCommand_Test" Id="{61adacd1-bbb3-4810-9e81-807401845494}">
      <Declaration><![CDATA[METHOD MoverRejectsDisableCommand_Test : BOOL
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF TestSuite.Test(__POUNAME()).ExecuteTest() THEN
	Actual := FAILED( testMover.DisableMover());
	TestSuite.Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverRejectsGapLow_Test" Id="{6530a17d-1991-47b3-b4cb-06ac96089734}">
      <Declaration><![CDATA[METHOD MoverRejectsGapLow_Test : BOOL
VAR_INST
	Expected : mc_lreal := 100.0;
	Actual	 : mc_lreal;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF TestSuite.Test(__POUNAME()).ExecuteTest() THEN
	testMover.Gap := 25.0;
	Actual := testMover.Gap;
	TestSuite.Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverRejectsHighVeloCommand_Test" Id="{5ee085d8-22d2-44c9-b967-7741b9170bcb}">
      <Declaration><![CDATA[METHOD MoverRejectsHighVeloCommand_Test : BOOL
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF TestSuite.Test(__POUNAME()).ExecuteTest() THEN
	Actual := FAILED( testMover.MoveTo(100.0,5000.0,true));
	TestSuite.Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverRejectsNegVeloCommand_Test" Id="{64cadcb0-5bf1-4cfd-9d6d-2fa99dffcb0d}">
      <Declaration><![CDATA[METHOD MoverRejectsNegVeloCommand_Test : BOOL
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF TestSuite.Test(__POUNAME()).ExecuteTest() THEN
	Actual := FAILED( testMover.MoveTo(100.0,-1.0,TRUE));
	TestSuite.Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverRejectsResetWithNoError_Test" Id="{f5425bf8-2274-4dca-931b-4651d9a2101b}">
      <Declaration><![CDATA[METHOD MoverRejectsResetWithNoError_Test : BOOL
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF TestSuite.Test(__POUNAME()).ExecuteTest() THEN
	Actual := FAILED( testMover.ResetAxis());
	TestSuite.Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>