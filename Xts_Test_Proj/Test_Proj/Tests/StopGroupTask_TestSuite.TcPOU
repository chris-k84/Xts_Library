<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="StopGroupTask_TestSuite" Id="{99aef4ad-4fc7-41c6-a957-800e5b929308}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK StopGroupTask_TestSuite EXTENDS TestSuite<TestSuiteParameter.MaxTestCount>
VAR
	stubCAGroup : I_CollisionGroup;
	testStopGrp : StopMoverGroup:= (MyCollisionGroup := stubCAGroup);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[TaskAcceptsValidCommand_Test();
TaskRejectsCommandWithNoRef_Test();
TaskRejectsCycleWithNoRef_Test();
TaskRejectsDuplicateCommand_Test();
TaskRejectsZeroDecel_Test();
TaskRejectsZeroJerk_Test();]]></ST>
    </Implementation>
    <Method Name="TaskAcceptsValidCommand_Test" Id="{bbbd6c90-0584-49fd-9b9a-b03e6807aed2}">
      <Declaration><![CDATA[METHOD TaskAcceptsValidCommand_Test
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	Actual := SUCCEEDED(testStopGrp.Execute());
	testStopGrp.Abort();
	Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="TaskRejectsCommandWithNoRef_Test" Id="{d1ce67c8-b8c6-45a7-99fc-4bf33acd3be8}">
      <Declaration><![CDATA[METHOD TaskRejectsCommandWithNoRef_Test
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	testStopGrp.MyCollisionGroup := 0;
	Actual := SUCCEEDED(testStopGrp.Execute());
	testStopGrp.MyCollisionGroup := stubCAGroup;
	testStopGrp.Abort();
	Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="TaskRejectsCycleWithNoRef_Test" Id="{ef2644e4-091e-4487-8a64-1b9096d6b7d5}">
      <Declaration><![CDATA[METHOD TaskRejectsCycleWithNoRef_Test
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	testStopGrp.MyCollisionGroup := 0;
	Actual := FAILED(testStopGrp.Cycle());
	testStopGrp.MyCollisionGroup := stubCAGroup;
	testStopGrp.Abort();
	Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="TaskRejectsDuplicateCommand_Test" Id="{bffcdbff-9e58-4f9c-b472-3c027ffeccec}">
      <Declaration><![CDATA[METHOD TaskRejectsDuplicateCommand_Test
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	testStopGrp.Execute();
	Actual := FAILED(testStopGrp.Execute());
	testStopGrp.Abort();
	Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="TaskRejectsZeroDecel_Test" Id="{2ad511e9-12d7-4d9d-9f2e-89b206f19ab8}">
      <Declaration><![CDATA[METHOD TaskRejectsZeroDecel_Test
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	testStopGrp.Deceleration := 1000.0;
	testStopGrp.Deceleration := 0.0;
	Actual := testStopGrp.Deceleration <> 0.0;
	Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="TaskRejectsZeroJerk_Test" Id="{0cdab2f7-a911-4354-b921-151032733675}">
      <Declaration><![CDATA[METHOD TaskRejectsZeroJerk_Test
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	testStopGrp.Jerk := 1000.0;
	testStopGrp.Jerk := 0.0;
	Actual := testStopGrp.Jerk <> 0.0;
	Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>