<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="TmsEmbarkStation" Id="{4d15a973-29cb-4ffe-934a-8f072d992ec0}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK TmsEmbarkStation EXTENDS Station
VAR
	SwitchAxisCtrl : I_Axis;
	SwitchAxisPosCtrl : I_Position;
	_Track1SwitchPosition : MC_LREAL;
	_Track2SwitchPosition : MC_LREAL;
	ExecuteSequence : BOOL;
	_MyTrackNumber : INT := 1;
	State :(
		Init,                                               
		Ready,                                 
        Waiting,
		HasSwitch,
		Call,
		FindTarget,
		Boarding,
		BoardingComplete,
		ActivateTrackForMover,
		Moving,
		Done); 
	_switchPosition: MC_LREAL;
	_BoardVelocity : MC_LREAL;
	_SwitchVelocity : MC_LREAL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[{analysis -2}]]></ST>
    </Implementation>
    <Property Name="BoardVelocity" Id="{af5577ef-90f6-4070-9e3d-dce62d068c94}">
      <Declaration><![CDATA[PROPERTY BoardVelocity : MC_LREAL]]></Declaration>
      <Get Name="Get" Id="{442f20d9-4d5c-462e-ace0-37721614361e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[BoardVelocity := _BoardVelocity;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{4f476cb8-1c36-46ee-b33f-8098bec190be}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_BoardVelocity := BoardVelocity;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="FB_Init" Id="{c56e5d7e-44de-4ea5-9429-5a143178668d}">
      <Declaration><![CDATA[(*FB_Init is always available implicitly and it is used primarily for initialization.
The return value is not evaluated. For a specific influence, you can also declare the
methods explicitly and provide additional code there with the standard initialization
code. You can evaluate the return value.*)
METHOD FB_Init : BOOL
VAR_INPUT
	(* TRUE: the retain variables are initialized (reset warm / reset cold)*)
	bInitRetains	: BOOL;
	(* TRUE: the instance will be copied to the copy code afterward (online change)   *)
	bInCopyCode	: BOOL;
	Position	: LREAL;
	SwitchAxis : I_Position;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SwitchAxisPosCtrl := SwitchAxis;]]></ST>
      </Implementation>
    </Method>
    <Property Name="MyTrackNumber" Id="{3cbcc021-27ff-4251-b3d2-761cf34c192e}">
      <Declaration><![CDATA[PROPERTY MyTrackNumber : INT
]]></Declaration>
      <Get Name="Get" Id="{eac07d3d-cc95-4d94-be8d-aab0ced9fdea}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MyTrackNumber := _MyTrackNumber;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{4b1478e4-977e-454a-a0bf-fe888f795dfb}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_MyTrackNumber := MyTrackNumber;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Operation" Id="{5e624551-3837-4f5d-8aa6-8dbf896b2a06}">
      <Declaration><![CDATA[METHOD PROTECTED Operation : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE State OF
	Init:
		_Operating := _IsClear := _Complete := _Ready := _HasMover := FALSE;
		State := Ready;
	
	Ready:	
		IF ExecuteSequence THEN
			_Operating := _Complete := _HasMover := FALSE;
			_IsClear := _Ready := TRUE;
			State := Waiting;
		END_IF
	
	Waiting:
		IF _HasMover THEN
			State := HasSwitch;
			_Operating := TRUE;
			_IsClear := FALSE;
			_Ready := FALSE;
			_Complete := FALSE;
		END_IF
	
	HasSwitch:
		IF (_MyTrackNumber = 1 AND (SwitchAxisPosCtrl.isAtPosition(_Track1SwitchPosition) ))
			OR (_MyTrackNumber = 2 AND (SwitchAxisPosCtrl.isAtPosition(_Track2SwitchPosition))) THEN
					State := Boarding;
		ELSE
			State := Call;
		END_IF	
		
	Call:
		IF SwitchAxisPosCtrl.IsStationary() THEN
			IF _MyTrackNumber = 1 THEN
				SwitchAxisPosCtrl.MoveToPosition(Position := _Track1SwitchPosition, Velocity := _SwitchVelocity);
			ELSE
				SwitchAxisPosCtrl.MoveToPosition(Position := _Track2SwitchPosition, Velocity := _SwitchVelocity);
			END_IF
		ELSE
			State := Waiting;
		END_IF
			
	Boarding:
		_MyMover.MoveTo(RequiredPosition := _switchPosition, MoveVelocity := _BoardVelocity, NonModuloMove := TRUE);
		IF _MyMover.isMoverAtPosition(position := _switchPosition) THEN
			State := BoardingComplete;
		END_IF
		
	BoardingComplete:
		IF _MyTrackNumber = 1 THEN
			SwitchAxisPosCtrl.MoveToPosition(Position := _Track2SwitchPosition, Velocity := _SwitchVelocity);
		ELSE
			SwitchAxisPosCtrl.MoveToPosition(Position := _Track1SwitchPosition, Velocity := _SwitchVelocity);
		END_IF
		State := BoardingComplete;
		
	Moving:
		IF (_MyTrackNumber = 1 AND SwitchAxisPosCtrl.isAtPosition(position := _Track2SwitchPosition)) OR
			(_MyTrackNumber = 2 AND SwitchAxisPosCtrl.isAtPosition(position := _Track1SwitchPosition)) THEN
			State := ActivateTrackForMover;
		END_IF
		
	ActivateTrackForMover:
		IF _MyTrackNumber = 1 THEN
			_MyMover.ActivateTrack(Track := 2);
		ELSE
			_MyMover.ActivateTrack(Track := 1);
		END_IF
		State := Moving;
		_Complete := TRUE;
			
	Done:
		IF _Complete AND NOT _HasMover THEN
			_Operating := FALSE;
			_IsClear := TRUE;
			_Ready := TRUE;
			State := Waiting;
		END_IF	
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="StartSwitch" Id="{c29e9395-8979-4e9a-90a8-1d97909d0ac9}">
      <Declaration><![CDATA[METHOD StartSwitch : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ExecuteSequence := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="StopSwitch" Id="{3cacf78b-01e4-4c36-b301-1826803c65db}">
      <Declaration><![CDATA[METHOD StopSwitch : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ExecuteSequence := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="SwitchTravelPosition" Id="{506615ae-e584-4b6b-8c90-23702c945ca0}">
      <Declaration><![CDATA[PROPERTY SwitchTravelPosition : mc_lreal
]]></Declaration>
      <Get Name="Get" Id="{770e482e-e926-4e26-8349-fb06dc2d74be}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[SwitchTravelPosition := _switchPosition;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{2f71d79c-8b57-4fda-9b2a-e631ae1faffd}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_switchPosition := SwitchTravelPosition;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Track1SwitchPosition" Id="{190ee51d-8616-4771-bea0-4a043a7d3d59}">
      <Declaration><![CDATA[PROPERTY Track1SwitchPosition : MC_LREAL]]></Declaration>
      <Get Name="Get" Id="{2179123a-03ea-4eb3-8d32-50c09c60e6da}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Track1SwitchPosition := _Track1SwitchPosition;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{98459ca6-5c5e-4646-8d93-b28fde23c27f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_Track1SwitchPosition := Track1SwitchPosition;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Track2SwitchPosition" Id="{5e471955-b1fa-42e8-8457-954969d80adc}">
      <Declaration><![CDATA[PROPERTY Track2SwitchPosition : MC_LREAL]]></Declaration>
      <Get Name="Get" Id="{6218b073-eaf9-44e9-8692-abdac10dd02b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Track2SwitchPosition := _Track2SwitchPosition;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{5e38ec9d-d9b7-4541-b1f9-c48e79167e2a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_Track2SwitchPosition := Track2SwitchPosition;]]></ST>
        </Implementation>
      </Set>
    </Property>
  </POU>
</TcPlcObject>