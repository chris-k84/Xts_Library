<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="XTSHardware" Id="{2082c175-1a19-4a3f-b920-8dbd46477756}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK XTSHardware IMPLEMENTS I_Cyclic, I_Initialise
VAR
	XtsParts : ARRAY[0..19] OF XtsPart;
	_MyNumberParts : INT;
	XtsTracks : ARRAY[0..9] OF XtsTrack;
	_MyNumberTracks : INT;
	TrackOTCIDs: ARRAY [1..Tc3_XTS_Utility.TcIoXtsEnvironmentParameterList.MaxXtsTracksPerXpu] OF Tc3_XTS_Utility.OTCID;
	_MyXpu : Tc3_XTS_Utility.I_TcIoXtsProcessingUnit;
	XtsIoEnvInitialiseState : INT;
	MyPartCount: UDINT;
	MyTrackCount: UDINT;
	bMoverIdDetectionActive: BOOL;
	bTriggerDetect: BOOL;
	bMoverIdDetectionError: BOOL;
	bMoverIdDetected: BOOL;
	_MyXts : INT := 1;
	_MyName : STRING;
	_isInitialised: BOOL;
	_hasXPU : BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Commands" Id="{fac9eba9-c7de-4a76-a05e-49072f1b1bf8}" />
    <Folder Name="Settings" Id="{977db0ee-8b4c-4e4e-adde-487140886b9b}" />
    <Folder Name="Status" Id="{1e7de418-5187-4871-82b8-ce216901bd03}" />
    <Method Name="Cycle" Id="{907368a2-7640-4dfa-a8a9-6f1d20861921}">
      <Declaration><![CDATA[METHOD PUBLIC  Cycle : HRESULT
VAR
	i : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _isInitialised THEN
	Cycle := -1;
ELSE
	FOR i := 0 TO UDINT_TO_INT(MyPartCount-1) DO
		XtsParts[i].Cycle();
	END_FOR
	FOR i := 0 TO UDINT_TO_INT(MyTrackCount-1) DO
		XtsTracks[i].Cycle();
	END_FOR
	Cycle := 1;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="getAllMoversValid" Id="{61902ec7-4049-4544-9a8e-27dabf1b61be}" FolderPath="Status\">
      <Declaration><![CDATA[METHOD getAllMoversValid : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ IF _MyXpu.GetAreAllPositionsValid() THEN
	 getAllMoversValid := TRUE;
 END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="getMoversDetected" Id="{6134912a-11cc-419f-9366-ca4c2c2c2f9f}" FolderPath="Status\">
      <Declaration><![CDATA[METHOD getMoversDetected : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _MyXpu.GetDetectedMoverCount() = _MyXpu.GetExpectedMoverCount() THEN
	getMoversDetected := TRUE;
ELSE
	getMoversDetected := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetNumberOfDetectedMovers" Id="{c42e09ab-aa24-40e6-b823-628b7ba84a39}" FolderPath="Status\">
      <Declaration><![CDATA[METHOD GetNumberOfDetectedMovers : UDINT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetNumberOfDetectedMovers := _MyXpu.GetDetectedMoverCount();]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetTrackByOTCID" Id="{d55b1037-e87a-4176-a531-719c46a289ea}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD GetTrackByOTCID : I_XtsTrack
VAR_INPUT
	trackOTCID : OTCID;
END_VAR
VAR
	i: UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 0 TO _MyNumberTracks DO
	IF trackOTCID = XtsTracks[i].MyOTCID THEN
		GetTrackByOTCID := XtsTracks[i];
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="HasXPU" Id="{6ea3239f-d8a6-4ea4-a8cf-a5b51d9c01b2}" FolderPath="Status\">
      <Declaration><![CDATA[METHOD HasXPU : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[HasXPU := _hasXPU;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialise" Id="{95822be7-e433-46ff-bfc3-e4b3c51e2a74}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD Initialise : HRESULT
VAR
	i: UDINT;
END_VAR

VAR
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE XtsIoEnvInitialiseState OF
	0:
		IF _MyXpu = 0 THEN
			RETURN;
		ELSE
			_MyName := _MyXpu.P_ObjectName;
			XtsIoEnvInitialiseState := 1;
		END_IF
	1:
		MyPartCount := _MyXpu.GetPartCount();
		IF MyPartCount = _MyNumberParts THEN
			FOR i := 0 TO UDINT_TO_INT(MyPartCount - 1) DO
				XtsParts[i].MyXtsIoEnvInterface := _MyXpu.PartTcIo(UDINT_TO_UINT(i + 1));
				IF THIS^.IsInSim() THEN
					XtsParts[i].SetInSim();
				END_IF
			END_FOR
			XtsIoEnvInitialiseState := 3;
		ELSE
			XtsIoEnvInitialiseState := 999;
		END_IF
	3:
		MyTrackCount := _MyXpu.GetTrackCount();
		_MyXpu.GetTrackOids();
		TrackOTCIDs := _MyXpu.P_TrackOids;
		IF MyTrackCount = _MyNumberTracks THEN
			FOR i := 0 TO UDINT_TO_INT(MyTrackCount - 1) DO
				XtsTracks[i].MyXtsIoEnvInterface := _MyXpu.TrackTcIo(UDINT_TO_UINT(i + 1));
				XtsTracks[i].MyOTCID := TrackOTCIDs[i + 1];
			END_FOR
			XtsIoEnvInitialiseState := 4;
		ELSE
			XtsIoEnvInitialiseState := 999;
		END_IF
	4:
		XtsIoEnvInitialiseState := 5;
		FOR i := 0 TO UDINT_TO_INT(MyPartCount - 1) DO
			IF XtsParts[i].Initialise() <> 2 THEN
				XtsIoEnvInitialiseState := 4;
			END_IF
		END_FOR
	5:
		XtsIoEnvInitialiseState := 6;
		FOR i := 0 TO UDINT_TO_INT(MyTrackCount - 1) DO
			IF XtsTracks[i].Initialise() <> 2 THEN
				XtsIoEnvInitialiseState := 5;
			END_IF
		END_FOR
	6:
		_isInitialised := TRUE;
		Initialise := 2;
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Is24VdcOK" Id="{16c30a69-c544-4706-ba78-c8aed5346201}" FolderPath="Status\">
      <Declaration><![CDATA[METHOD Is24VdcOK : HRESULT
VAR
	i : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Is24VdcOK := 2;
FOR i := 0 TO (_MyXpu.GetPartCount() -1) DO
	IF XtsParts[i].Is24VBusOK() = 1 THEN
		Is24VdcOK := 1;
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="Is48VdcOK" Id="{ff4a117c-24f4-4466-b159-c15d29dc7330}" FolderPath="Status\">
      <Declaration><![CDATA[METHOD Is48VdcOK : HRESULT
VAR
	i : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Is48VdcOK := 2;
FOR i := 0 TO (_MyXpu.GetPartCount() - 1) DO
	IF XtsParts[i].Is48VBusOK() = 1 THEN
		Is48VdcOK := 1;
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsInitialised" Id="{550c07cc-fb09-419f-9cfc-c551f12c3cb9}" FolderPath="Status\">
      <Declaration><![CDATA[METHOD IsInitialised : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsInSim" Id="{c26b05e6-e2eb-40cc-bea5-adcd4dafa0e7}" FolderPath="Status\">
      <Declaration><![CDATA[METHOD IsInSim : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF  _MyXpu.GetOperationMode() = OperationMode.Simulation  THEN
	IsInSim := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="MyName" Id="{0d9f86cc-11b2-415a-83b4-e3fe22742bf6}" FolderPath="Status\">
      <Declaration><![CDATA[PROPERTY MyName : string]]></Declaration>
      <Get Name="Get" Id="{05735f6c-e3fe-4ee3-a217-5178eba283c4}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MyName := _MyName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="MyNumberParts" Id="{a98ec162-431e-48cc-ae6d-f8949630ea06}" FolderPath="Settings\">
      <Declaration><![CDATA[PROPERTY MyNumberParts : int]]></Declaration>
      <Get Name="Get" Id="{6aea69f8-39b7-432c-a6be-0e19820e9502}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MyNumberParts := _MyNumberParts;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{3a096234-62c8-4cae-b087-998329491864}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_MyNumberParts := MyNumberParts;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="MyNumberTracks" Id="{4b737a8f-2e1c-463e-a095-5f8b64b3f222}" FolderPath="Settings\">
      <Declaration><![CDATA[PROPERTY MyNumberTracks : int]]></Declaration>
      <Get Name="Get" Id="{42884cba-9387-4d1f-8822-97815c1c289f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MyNumberTracks := _MyNumberTracks;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{615cc55c-cb9a-4994-a6a7-0d139d5ef074}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_MyNumberTracks := MyNumberTracks;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="MyXpu" Id="{9f0e6f27-b8f0-452c-b07d-d4d2a7ed1b3b}">
      <Declaration><![CDATA[PROPERTY MyXpu : I_TcIoXtsProcessingUnit]]></Declaration>
      <Get Name="Get" Id="{ef18a883-259a-46c5-ac1a-fd1d0138159b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MyXpu := _MyXpu;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{3f18a9fd-c75b-45a9-b0a5-a4cb82b21b6b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_MyXpu := MyXpu;
_hasXPU := TRUE;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="MyXts" Id="{97cba7e2-9698-4397-a6b4-6da9e2abe688}" FolderPath="Settings\">
      <Declaration><![CDATA[PROPERTY MyXts : INT]]></Declaration>
      <Get Name="Get" Id="{ad7d6d73-4fab-4d05-975f-01e196f73334}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MyXts := _MyXts;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{7ade4ba5-90b5-400a-aadf-8d737611d6d9}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_MyXts := MyXts;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="SetMoverNumbers" Id="{fda2cbfb-05d3-433d-b308-26404cfa0e4a}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD SetMoverNumbers : HRESULT
VAR_INPUT
	NumberOfMovers : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _MyXpu.SetConfiguredDetectionCount(nConfiguredMoverDetectionCount := TO_UDINT(NumberOfMovers)) THEN
	SetMoverNumbers := 1;
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetTrackForDetection" Id="{33a6fd5d-a8a8-4e54-be38-eeae850dd3e9}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD SetTrackForDetection : BOOL
VAR_INPUT
	TrackToDetect : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF MyTrackCount = 1 THEN
	_MyXpu.TrackTcIo(1).SetIsIncludedInDetection(TRUE);
	SetTrackForDetection := TRUE;
ELSE
	IF TrackToDetect <= MyTrackCount THEN 
		SetTrackForDetection := TRUE;
		_MyXpu.TrackTcIo(TrackToDetect).SetIsIncludedInDetection(TRUE);
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="TriggerMoverDetection" Id="{15e78533-ebfe-46e6-bd25-18e4044d6883}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD TriggerMoverDetection : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_MyXpu.TriggerDetection();
TriggerMoverDetection := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TriggerMoverID" Id="{23436421-ecb3-466c-b86b-5fefe5c7904c}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD TriggerMoverID : BOOL
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Mover1 Functionality		
// Check if "MoverIdDetectionMode" has been activated under the XtsProcessingUnit object.
IF _MyXpu.GetMoverIdDetectionMode() = E_MoverIdDetectionMode.Mover1 THEN

	// Check if the "MoverIdDetection" has already been started or the Mover1 was found.
	IF NOT (bMoverIdDetectionActive OR bMoverIdDetected OR bTriggerDetect) THEN
		
		// Trigger the "MoverIdDetection".
		_MyXpu.TriggerMoverIdDetection();
		bTriggerDetect := TRUE;
	END_IF

	// Check for error or success of "MoverIdDetection".
	bMoverIdDetectionError 	:= _MyXpu.GetHasMoverIdDetectionError();
	bMoverIdDetected 	:= _MyXpu.GetIsMoverIdDetectionValid();
	bMoverIdDetectionActive	:= _MyXpu.GetIsMoverIdDetectionActive();
	
	// If the detection has an error, check for errors in output and try again.
	IF bMoverIdDetectionError THEN
		RETURN; 
	END_IF

	// Do not process any further until the "MoverId" was deteced.
	IF NOT bMoverIdDetected THEN
		RETURN;
	END_IF	
	TriggerMoverID := TRUE;	
ELSE
	TriggerMoverID := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="TriggerRedetection" Id="{0183a3e0-45ff-4ec4-b868-d12cfe75fb77}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD TriggerRedetection : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _MyXpu.TriggerRedetection() THEN
	TriggerRedetection := 1;
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>