<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="XTSHardware" Id="{2082c175-1a19-4a3f-b920-8dbd46477756}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK XTSHardware IMPLEMENTS I_Cyclic, I_Initialisable, I_XtsHardware, I_Object
VAR
	XtsParts : ARRAY[0..TcIoXtsEnvironmentParameterList.MaxPartsPerTrack] OF XtsPart;
	_MyNumberParts : INT;
	XtsTracks : ARRAY[0..TcIoXtsEnvironmentParameterList.MaxXtsTracksPerXpu] OF XtsTrack;
	_MyNumberTracks : INT;
	TrackOTCIDs: ARRAY [1..Tc3_XTS_Utility.TcIoXtsEnvironmentParameterList.MaxXtsTracksPerXpu] OF Tc3_XTS_Utility.OTCID;
	_MyXpu : Tc3_XTS_Utility.I_TcIoXtsProcessingUnit;
	XtsIoEnvInitialiseState : INT;
	MyPartCount: UDINT;
	MyTrackCount: UDINT;
	bMoverIdDetectionActive: BOOL;
	bTriggerDetect: BOOL;
	bMoverIdDetectionError: BOOL;
	bMoverIdDetected: BOOL;
	_MyXts : INT := 1;
	_MyName : STRING;
	_isInitialised: BOOL;
	_hasXPU : BOOL;
END_VAR
VAR CONSTANT
	MaxPartsPerTrack : INT := 9;
	MaxTracksPerXts : INT := 9;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Commands" Id="{fac9eba9-c7de-4a76-a05e-49072f1b1bf8}" />
    <Folder Name="Settings" Id="{977db0ee-8b4c-4e4e-adde-487140886b9b}" />
    <Folder Name="Status" Id="{1e7de418-5187-4871-82b8-ce216901bd03}" />
    <Method Name="AreAllMoverPositionsValid" Id="{61902ec7-4049-4544-9a8e-27dabf1b61be}" FolderPath="Status\">
      <Declaration><![CDATA[METHOD AreAllMoverPositionsValid : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ IF _MyXpu.GetAreAllPositionsValid() THEN
	 AreAllMoverPositionsValid := TRUE;
 END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AreAnyPartsInError" Id="{699ab4e2-69ca-4162-ab63-9b7de63fc2c4}" FolderPath="Status\">
      <Declaration><![CDATA[METHOD AreAnyPartsInError : BOOL
VAR
	i : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 0 TO TO_INT(MyPartCount - 1) DO
	IF XtsParts[i].HasError() THEN
		AreAnyPartsInError := TRUE;
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="AreExpectedMoversFound" Id="{642f39f7-45fb-4e7e-95d2-cca7f46c73a6}" FolderPath="Status\">
      <Declaration><![CDATA[METHOD AreExpectedMoversFound : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[AreExpectedMoversFound := _MyXpu.GetExpectedMoverCount() = _MyXpu.GetDetectedMoverCount();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Cycle" Id="{907368a2-7640-4dfa-a8a9-6f1d20861921}">
      <Declaration><![CDATA[METHOD PUBLIC  Cycle : HRESULT
VAR
	i : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _isInitialised THEN
	Cycle := -1;
ELSE
	FOR i := 0 TO (MyPartCount - 1) DO
		XtsParts[i].Cycle();
	END_FOR
	FOR i := 0 TO (MyTrackCount-1) DO
		XtsTracks[i].Cycle();
	END_FOR
	Cycle := 1;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="DetectedNumberOfParts" Id="{0cb9ae9e-f39b-4029-894a-e6620c4ecf6f}" FolderPath="Status\">
      <Declaration><![CDATA[PROPERTY DetectedNumberOfParts : INT]]></Declaration>
      <Get Name="Get" Id="{c6657b2f-e5c5-4f83-9cec-2457aaa61cb5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[DetectedNumberOfParts := TO_INT(_MyNumberParts);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="DetectedNumberOfTracks" Id="{1aee3abf-438c-401a-96dd-e5d65d11e759}" FolderPath="Status\">
      <Declaration><![CDATA[PROPERTY DetectedNumberOfTracks : UINT]]></Declaration>
      <Get Name="Get" Id="{6b1c17e2-83ee-47f8-b12c-999752617527}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[DetectedNumberOfTracks := TO_UINT( MyTrackCount); ]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="ExpectedNumberOfParts" Id="{a98ec162-431e-48cc-ae6d-f8949630ea06}" FolderPath="Settings\">
      <Declaration><![CDATA[PROPERTY ExpectedNumberOfParts : int]]></Declaration>
      <Get Name="Get" Id="{6aea69f8-39b7-432c-a6be-0e19820e9502}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ExpectedNumberOfParts := _MyNumberParts;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{3a096234-62c8-4cae-b087-998329491864}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_MyNumberParts := ExpectedNumberOfParts;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="ExpectedNumberOfTracks" Id="{4b737a8f-2e1c-463e-a095-5f8b64b3f222}" FolderPath="Settings\">
      <Declaration><![CDATA[PROPERTY ExpectedNumberOfTracks : int]]></Declaration>
      <Get Name="Get" Id="{42884cba-9387-4d1f-8822-97815c1c289f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ExpectedNumberOfTracks := _MyNumberTracks;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{615cc55c-cb9a-4994-a6a7-0d139d5ef074}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_MyNumberTracks := ExpectedNumberOfTracks;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="GetConfiguredDetectionMoverNumber" Id="{43f766d9-966d-4623-a223-676c73e2281d}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD GetConfiguredDetectionMoverNumber : UDINT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetConfiguredDetectionMoverNumber := _MyXpu.GetConfiguredDetectionCount();]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetMoverDetectionState" Id="{5c04b4df-babc-44c4-8315-87ac6e89bad7}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD GetMoverDetectionState : DetectionStateEnum
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetMoverDetectionState := _MyXpu.GetDetectionState(); ]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetNumberMoversDetected" Id="{6134912a-11cc-419f-9366-ca4c2c2c2f9f}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD GetNumberMoversDetected : UDINT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[getNumberMoversDetected := _MyXpu.GetDetectedMoverCount();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetPartErrorCode" Id="{1db9bad9-9f3a-4db0-b023-7e6033e80429}" FolderPath="Status\">
      <Declaration><![CDATA[METHOD GetPartErrorCode : UDINT
VAR
	i : INT; 
	errorCode : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 0 TO TO_INT(MyPartCount - 1) DO
	IF XtsParts[i].GetCurrentError() <> 0 THEN
		errorCode := XtsParts[i].GetCurrentError();
		IF errorCode > GetPartErrorCode THEN
			GetPartErrorCode := errorCode;
		END_IF
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetTrackInterfaceByNumber" Id="{f2581b5d-dcdf-4c20-8ad6-39f08544aef0}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD GetTrackInterfaceByNumber : I_XtsTrack
VAR_INPUT
	TrackNumber : UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF TrackNumber = 0 OR TrackNumber > MyTrackCount THEN
	GetTrackInterfaceByNumber := 0;
	RETURN;
END_IF
GetTrackInterfaceByNumber := XtsTracks[TrackNumber - 1];
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetTrackInterfaceByOTCID" Id="{d55b1037-e87a-4176-a531-719c46a289ea}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD GetTrackInterfaceByOTCID : I_XtsTrack
VAR_INPUT
	trackOTCID : OTCID;
END_VAR
VAR
	i: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 0 TO _MyNumberTracks - 1 DO
	IF trackOTCID = XtsTracks[i].MyOTCID THEN
		GetTrackInterfaceByOTCID := XtsTracks[i];
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="HasValidXPUReference" Id="{6ea3239f-d8a6-4ea4-a8cf-a5b51d9c01b2}" FolderPath="Status\">
      <Declaration><![CDATA[METHOD HasValidXPUReference : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[HasValidXPUReference := _hasXPU;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialise" Id="{95822be7-e433-46ff-bfc3-e4b3c51e2a74}">
      <Declaration><![CDATA[METHOD Initialise : HRESULT
VAR
	i: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Initialise := -1;
CASE XtsIoEnvInitialiseState OF
	0:
		IF _MyXpu = 0 THEN
			Initialise := -1;
			RETURN;
		ELSE
			_MyName := _MyXpu.P_ObjectName;
			XtsIoEnvInitialiseState := 1;
		END_IF
	1:
		MyPartCount := _MyXpu.GetPartCount();
		IF TO_INT(MyPartCount) = _MyNumberParts THEN
			FOR i := 0 TO (TO_INT(MyPartCount) - 1) DO
				XtsParts[i].MyXtsIoEnvInterface := _MyXpu.PartTcIo(TO_UINT(i + 1));
				IF THIS^.IsXtsInSim() THEN
					XtsParts[i].SetInSim();
				END_IF
			END_FOR
			XtsIoEnvInitialiseState := 3;
		ELSE
			XtsIoEnvInitialiseState := 999;
		END_IF
	3:
		MyTrackCount := _MyXpu.GetTrackCount();
		_MyXpu.GetTrackOids();
		TrackOTCIDs := _MyXpu.P_TrackOids;
		IF TO_INT(MyTrackCount) = _MyNumberTracks THEN
			FOR i := 0 TO UDINT_TO_INT(MyTrackCount - 1) DO
				XtsTracks[i].MyXtsIoEnvInterface := _MyXpu.TrackTcIo(TO_UINT(i + 1));
				XtsTracks[i].MyOTCID := TrackOTCIDs[i + 1];
			END_FOR
			XtsIoEnvInitialiseState := 4;
		ELSE
			XtsIoEnvInitialiseState := 999;
		END_IF
	4:
		XtsIoEnvInitialiseState := 5;
		FOR i := 0 TO UDINT_TO_INT(MyPartCount - 1) DO
			IF XtsParts[i].Initialise() <> 2 THEN
				XtsIoEnvInitialiseState := 4;
			END_IF
		END_FOR
	5:
		XtsIoEnvInitialiseState := 6;
		FOR i := 0 TO UDINT_TO_INT(MyTrackCount - 1) DO
			IF XtsTracks[i].Initialise() <> 2 THEN
				XtsIoEnvInitialiseState := 5;
			END_IF
		END_FOR
	6:
		_isInitialised := TRUE;
		Initialise := 0;
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsHardware24VdcOK" Id="{16c30a69-c544-4706-ba78-c8aed5346201}" FolderPath="Status\">
      <Declaration><![CDATA[METHOD IsHardware24VdcOK : HRESULT
VAR
	i : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IsHardware24VdcOK := 2;
FOR i := 0 TO (_MyXpu.GetPartCount() -1) DO
	IF NOT XtsParts[i].Is24VBusOK() THEN
		IsHardware24VdcOK := -1;
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsHardware48VdcOK" Id="{ff4a117c-24f4-4466-b159-c15d29dc7330}" FolderPath="Status\">
      <Declaration><![CDATA[METHOD IsHardware48VdcOK : HRESULT
VAR
	i : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IsHardware48VdcOK := 2;
FOR i := 0 TO (_MyXpu.GetPartCount() - 1) DO
	IF NOT XtsParts[i].Is48VBusOK() THEN
		IsHardware48VdcOK := -1;
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsIDDetectionStandard" Id="{aa7a18ac-0236-4a73-a20e-a9a08158b988}" FolderPath="Status\">
      <Declaration><![CDATA[METHOD IsIDDetectionStandard : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IsIDDetectionStandard := _MyXpu.GetMoverIdDetectionMode() = MoverIdDetectionMode.Standard;]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsInitialised" Id="{550c07cc-fb09-419f-9cfc-c551f12c3cb9}" FolderPath="Status\">
      <Declaration><![CDATA[METHOD IsInitialised : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IsInitialised := _isInitialised;]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsXtsInSim" Id="{c26b05e6-e2eb-40cc-bea5-adcd4dafa0e7}" FolderPath="Status\">
      <Declaration><![CDATA[METHOD IsXtsInSim : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF  _MyXpu.GetOperationMode() = OperationMode.Simulation  THEN
	IsXtsInSim := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="MyName" Id="{0d9f86cc-11b2-415a-83b4-e3fe22742bf6}" FolderPath="Status\">
      <Declaration><![CDATA[PROPERTY MyName : string]]></Declaration>
      <Get Name="Get" Id="{05735f6c-e3fe-4ee3-a217-5178eba283c4}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MyName := _MyName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="MyXpu" Id="{9f0e6f27-b8f0-452c-b07d-d4d2a7ed1b3b}">
      <Declaration><![CDATA[PROPERTY MyXpu : I_TcIoXtsProcessingUnit]]></Declaration>
      <Get Name="Get" Id="{ef18a883-259a-46c5-ac1a-fd1d0138159b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MyXpu := _MyXpu;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{3f18a9fd-c75b-45a9-b0a5-a4cb82b21b6b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_MyXpu := MyXpu;
_hasXPU := TRUE;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="MyXts" Id="{97cba7e2-9698-4397-a6b4-6da9e2abe688}" FolderPath="Settings\">
      <Declaration><![CDATA[PROPERTY MyXts : INT]]></Declaration>
      <Get Name="Get" Id="{ad7d6d73-4fab-4d05-975f-01e196f73334}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MyXts := _MyXts;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{7ade4ba5-90b5-400a-aadf-8d737611d6d9}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_MyXts := MyXts;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="RegisterWithParent" Id="{cc909a39-cbe3-4035-b5c9-fc3340c04e55}">
      <Declaration><![CDATA[METHOD RegisterWithParent
VAR_INPUT
	Runner	: I_HostObjects;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Runner.RegisterCyclic(THIS^);
Runner.RegisterInitialisable(THIS^);]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveATrackFromDetection" Id="{1e31681d-3ada-48de-80fd-ab8c9694949c}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD RemoveATrackFromDetection : HRESULT
VAR_INPUT
	TrackToRemove : UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF TrackToRemove = 0 THEN
	RemoveATrackFromDetection := -1;
	RETURN;
END_IF
IF TrackToRemove > MyTrackCount THEN
	RemoveATrackFromDetection := -2;
	RETURN;
END_IF
IF MyTrackCount = 1 THEN
	RemoveATrackFromDetection := -3;
	RETURN;
END_IF
XtsTracks[TrackToRemove - 1].RemoveFromDetection();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ResetParts" Id="{62a3421b-7f58-4518-b99a-efef3044ec5b}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD ResetParts : BOOL
VAR
	i : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 0 TO TO_INT(MyPartCount - 1) DO
	XtsParts[i].ResetPart();
	XtsParts[i].ResetNct();
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetAPartOriginTransform" Id="{603deaa6-bf5d-4b68-a30f-e30620f70274}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD SetAPartOriginTransform : BOOL
VAR_INPUT
	Part : INT;
	OriginTransform: Tc3_XTS_Utility.ST_OriginTransform;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[XtsParts[Part - 1].SetPartOriginTransform(OriginTransform);]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetATrackForDetection" Id="{33a6fd5d-a8a8-4e54-be38-eeae850dd3e9}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD SetATrackForDetection : HRESULT
VAR_INPUT
	TrackToDetect : UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF TrackToDetect = 0 THEN
	SetATrackForDetection := -1;
	RETURN;
END_IF
IF TrackToDetect > MyTrackCount THEN
	SetATrackForDetection := -2;
	RETURN;
END_IF

XtsTracks[TrackToDetect - 1].SetForDetection();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetMoverNumberForDetection" Id="{fda2cbfb-05d3-433d-b308-26404cfa0e4a}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD SetMoverNumberForDetection : HRESULT
VAR_INPUT
	NumberOfMovers : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NumberOfMovers < 0 THEN
	SetMoverNumberForDetection := -1;
	RETURN;
END_IF
IF NumberOfMovers > _MyXpu.GetMoverCount() THEN
	SetMoverNumberForDetection := -2;
	RETURN;
END_IF
 
_MyXpu.SetConfiguredDetectionCount(nConfiguredMoverDetectionCount := TO_UDINT(NumberOfMovers));]]></ST>
      </Implementation>
    </Method>
    <Method Name="TriggerMoverDetection" Id="{15e78533-ebfe-46e6-bd25-18e4044d6883}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD TriggerMoverDetection : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _MyXpu = 0 THEN
	TriggerMoverDetection := -1;
	RETURN;
END_IF
_MyXpu.TriggerDetection();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TriggerMoverIDDetection" Id="{23436421-ecb3-466c-b86b-5fefe5c7904c}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD TriggerMoverIDDetection : HRESULT
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[bMoverIdDetectionError 	:= _MyXpu.GetHasMoverIdDetectionError();
bMoverIdDetected 	:= _MyXpu.GetIsMoverIdDetectionValid();
bMoverIdDetectionActive	:= _MyXpu.GetIsMoverIdDetectionActive();

IF _MyXpu.GetMoverIdDetectionMode() = MoverIdDetectionMode.Standard THEN
	TriggerMoverIDDetection := -1;
	RETURN;
END_IF

IF bMoverIdDetectionActive OR bTriggerDetect THEN
	TriggerMoverIDDetection := -2;
	RETURN;
END_IF

IF bMoverIdDetected THEN
	TriggerMoverIDDetection := -3;
	RETURN;
END_IF
_MyXpu.TriggerMoverIdDetection();
bTriggerDetect := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TriggerMoverRedetection" Id="{0183a3e0-45ff-4ec4-b868-d12cfe75fb77}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD TriggerMoverRedetection : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _MyXpu = 0 THEN
	TriggerMoverRedetection := -1;
	RETURN;
END_IF

_MyXpu.TriggerRedetection();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>