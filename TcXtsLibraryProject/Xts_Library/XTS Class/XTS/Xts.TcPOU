<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="Xts" Id="{4538c683-94fc-49a1-b5ad-30ffec5e4eff}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK ABSTRACT Xts IMPLEMENTS I_Cyclic, I_Initialisable, I_XTS, I_Object
VAR
	MyName : STRING;
	_MyXts : INT;
	_MyCAGroup : STRING;
	_XtsEnabled : BOOL;
	_XPU : I_TcIoXtsProcessingUnit;
	_MoverArray : ARRAY[0..MaxMovers] OF I_XtsMover;
	_XtsIoEnvVar : I_XtsIoEnvVar;
	ICollisionGroup : I_CollisionGroup;
	_MyXtsHardware : I_XtsHardware;
	XtsHwState : XtsSystemInitialisation;
	EnableSequence : XtsEnableSequence(ICollisionGroup);
	DisableSequence : XtsDisableSequence(ICollisionGroup);
	State : UINT;	
	AtHome: BOOL;
	EnabledTrigger : R_TRIG;
	DisabledTrigger : R_TRIG;
	_registeredNumberOfMovers: INT;
	MoverRegistered: BOOL;
END_VAR
VAR CONSTANT
	MaxMovers : INT := 255;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[{analysis -2}]]></ST>
    </Implementation>
    <Folder Name="Operations" Id="{0e8598c4-3d58-4c14-a12f-6fd3f3ea02bf}" />
    <Folder Name="Settings" Id="{cec05bdb-9232-4b5d-b91e-848bd7bc55d9}" />
    <Folder Name="Status" Id="{c34f5481-c408-4671-a299-9c4a6e31956c}" />
    <Method Name="ActivateTracksInMovers" Id="{682f2d4e-bf73-44bf-93e3-716a6d45755c}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD PUBLIC ActivateTracksInMovers : BOOL
VAR
	ActivateTrackResult : BOOL;
	i : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 0 TO (_registeredNumberOfMovers - 1) DO
	_MoverArray[i].ActivateTrack(newTrack := _MoverArray[i].MoversActiveTrack,
									Track := _MyXtsHardware.GetTrackByOTCID(trackOTCID := _MoverArray[i].MoversActiveTrack));
END_FOR
ActivateTracksInMovers := true;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Cycle" Id="{da42838e-fb00-40a5-96f4-b787aa883566}">
      <Declaration><![CDATA[METHOD PUBLIC Cycle : HRESULT
VAR
	EnableResult : HRESULT;
	DisableResult : HRESULT;
	GrpStopResult : HRESULT;
	CollisionResult : HRESULT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[EnableResult := EnableSequence.Cycle();
DisableResult := DisableSequence.Cycle();
EnabledTrigger(CLK := EnableSequence.Done);
DisabledTrigger(CLK := DisableSequence.Done);
IF EnabledTrigger.Q THEN
	_XtsEnabled := TRUE;
END_IF
IF DisabledTrigger.Q THEN
	_XtsEnabled := false;
END_IF
IF EnableResult = E_FAIL OR
	DisableResult = E_FAIL OR
	GrpStopResult = E_FAIL OR
	CollisionResult = E_FAIL THEN
	Cycle := E_FAIL;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="DisableXTS" Id="{e2a85e5a-c7bf-481d-be4f-81acebc29fb7}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD DisableXTS : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[DisableXTS := DisableSequence.Disable();]]></ST>
      </Implementation>
    </Method>
    <Method Name="EnableXTS" Id="{e800781e-1435-4747-9cb4-9b9fab34ca22}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD EnableXTS : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[EnableSequence.Enable();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_Init" Id="{d6ce6c85-5c43-4276-b07f-92a2e669b228}">
      <Declaration><![CDATA[//FB_Init is always available implicitly and it is used primarily for initialization.
//The return value is not evaluated. For a specific influence, you can also declare the
//methods explicitly and provide additional code there with the standard initialization
//code. You can evaluate the return value.
METHOD FB_Init: BOOL
VAR_INPUT
    bInitRetains: BOOL; // TRUE: the retain variables are initialized (reset warm / reset cold)
    bInCopyCode: BOOL;  // TRUE: the instance will be copied to the copy code afterward (online change)   
	MyXtsIoEnvVar : I_XtsIoEnvVar;
	MyXtsHardware : I_XtsHardware;
	MyCAGroup : I_CollisionGroup;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_XtsIoEnvVar := MyXtsIoEnvVar;
_MyXtsHardware := MyXtsHardware;
ICollisionGroup := MyCAGroup;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetTMSMoverInterface" Id="{0e64eced-3444-47ea-9660-c818e7a9dea9}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD PUBLIC GetTMSMoverInterface : BOOL
VAR
	i : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 1 TO (_registeredNumberOfMovers - 1) DO
	_MoverArray[i].MoverXtsIoEnvInterface := _XPU.MoverTcIo(TO_UINT(i));
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetTrackByOCTID" Id="{1d75e1be-3c32-4213-9fda-cb384fa7a069}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD GetTrackByOCTID : I_XtsTrack
VAR_INPUT
	TrackId : OTCID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetTrackByOCTID := _MyXtsHardware.GetTrackByOTCID(trackOTCID := TrackId);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialise" Id="{3c52ae7d-89c5-4979-a1bd-5023a279947c}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD Initialise : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE XtsHwState OF
	XtsSystemInitialisation.Init:
		IF _XtsIoEnvVar.IsInitialised() THEN
			_XPU := _XtsIoEnvVar.GetXPUInterface(_MyXts);
			_MyXtsHardware.MyXpu := _XPU;
			XtsHwState := XtsSystemInitialisation.PassGroupReference;
		END_IF
		
	XtsSystemInitialisation.PassGroupReference:
		_MyCAGroup := ICollisionGroup.MyName;
		ICollisionGroup.CAGroupXtsIoEnvInterface := _XtsIoEnvVar.GetCaGroupInterface(_MyXts);
		XtsHwState := XtsSystemInitialisation.InitialiseHardware;
	
	XtsSystemInitialisation.InitialiseHardware:
		IF _MyXtsHardware.IsInitialised() THEN
			MyName := _MyXtsHardware.MyName;
			XtsHwState := XtsSystemInitialisation.SetDetection;
		END_IF
	
	XtsSystemInitialisation.SetDetection:
		IF _MyXtsHardware.SetTrackForDetection(1) THEN
			XtsHwState := XtsSystemInitialisation.Redetect;
		END_IF
		
	XtsSystemInitialisation.Redetect:
		IF _MyXtsHardware.TriggerRedetection() = 1 THEN
			XtsHwState := XtsSystemInitialisation.MoversValid;
		END_IF
		
	XtsSystemInitialisation.MoversValid:
		IF _MyXtsHardware.getAllMoversValid() THEN
			XtsHwState := XtsSystemInitialisation.AllMoversFound;
		END_IF
	
	XtsSystemInitialisation.AllMoversFound:
		IF _MyXtsHardware.getMoversDetected() THEN
			XtsHwState := XtsSystemInitialisation.XTSMode;
		END_IF
		
	XtsSystemInitialisation.XTSMode:
		IF _MyXtsHardware.IsInSim() THEN
			XtsHwState := XtsSystemInitialisation.MoverIdDetection;
		ELSE
			XtsHwState := XtsSystemInitialisation.CheckModuleVoltages;
		END_IF
		
	XtsSystemInitialisation.CheckModuleVoltages:
		IF _MyXtsHardware.Is24VdcOK() = 2 AND _MyXtsHardware.Is48VdcOK() = 2 THEN
			XtsHwState := XtsSystemInitialisation.MoverIdDetection;
		END_IF
	
	XtsSystemInitialisation.MoverIdDetection:
		IF _MyXtsHardware.TriggerMoverID() THEN
			XtsHwState := XtsSystemInitialisation.HWReady;
			GetTMSMoverInterface();
		END_IF
	
	XtsSystemInitialisation.HWReady:
		Initialise := 2;	
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsXtsIdle" Id="{98f4e7e8-94b6-4461-9a7b-2bd1c0aafde4}" FolderPath="Status\">
      <Declaration><![CDATA[METHOD IsXtsIdle : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IsXtsIdle := DisableSequence.Done;]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsXtsReady" Id="{73e2c3f0-1b32-45c2-a8cc-fbf01ac18258}" FolderPath="Status\">
      <Declaration><![CDATA[METHOD IsXtsReady : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IsXtsReady := _XtsEnabled;]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverHomeSequence" Id="{5c2deb91-ebd0-4a93-99ec-6a6bbbd5e076}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD PUBLIC Abstract MoverHomeSequence : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Property Name="MyNumberOfParts" Id="{33632734-2180-4c77-982d-f6997ead5bb5}" FolderPath="Settings\">
      <Declaration><![CDATA[PROPERTY MyNumberOfParts : int]]></Declaration>
      <Get Name="Get" Id="{ec285ff9-810a-46b0-8941-68dcdc1ab79d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MyNumberOfParts := _MyXtsHardware.MyNumberParts;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{4cb5fde4-6845-43ef-b95e-df4929829b0c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_MyXtsHardware.MyNumberParts := MyNumberOfParts;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="MyNumberOfTracks" Id="{6b69c4c6-afe3-46d9-bc08-86224f82f24a}" FolderPath="Settings\">
      <Declaration><![CDATA[PROPERTY MyNumberOfTracks : int]]></Declaration>
      <Get Name="Get" Id="{cab0d03f-ccb1-4d2e-adb6-3d697ceee44c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MyNumberOfTracks := _MyXtsHardware.MyNumberTracks;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{b24fc04c-e333-4935-bdff-3eff5a7d9932}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_MyXtsHardware.MyNumberTracks := MyNumberOfTracks;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="MyXts" Id="{b982f888-fcea-49f3-8b85-76339b257fce}" FolderPath="Settings\">
      <Declaration><![CDATA[PROPERTY MyXts : INT]]></Declaration>
      <Get Name="Get" Id="{7260ae55-6d72-4286-9779-c205f4bf658b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MyXts := _MyXtsHardware.MyXts;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{f9bbe24a-eac8-4b47-a949-a650212b0818}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_MyXtsHardware.MyXts := _MyXts := MyXts;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="RegisterHardware" Id="{535f01ed-4415-4576-8745-b33a0669ceb6}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD RegisterHardware : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="RegisterMovers" Id="{a3bbc877-121f-4130-8916-a04d2ba4dd9d}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD RegisterMovers : HRESULT
VAR_INPUT
	MyMover : I_XtsMover;
END_VAR
VAR
	i : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF MyMover <> 0 THEN
	MoverRegistered := FALSE;
	FOR i := 0 TO (_registeredNumberOfMovers - 1) DO
		IF _MoverArray[i] = MyMover THEN
			MoverRegistered := TRUE;
			RegisterMovers := -2;
		END_IF
	END_FOR
	IF NOT MoverRegistered AND_THEN _registeredNumberOfMovers <= MaxMovers THEN
		_MoverArray[_registeredNumberOfMovers] := MyMover;
		_registeredNumberOfMovers := _registeredNumberOfMovers + 1;
		RegisterMovers := 1;
	END_IF
ELSE
	RegisterMovers := -1;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="RegisterWithParent" Id="{5a27c335-0022-4ddf-98ff-1436953bbdbd}">
      <Declaration><![CDATA[METHOD RegisterWithParent
VAR_INPUT
	Runner	: I_HostObjects;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Runner.RegisterCyclic(THIS^);
Runner.RegisterInitialise(THIS^);]]></ST>
      </Implementation>
    </Method>
    <Method Name="StopXts" Id="{4b648283-f5f4-4d47-a58f-be53e519365d}" FolderPath="Operations\">
      <Declaration><![CDATA[METHOD StopXts : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ICollisionGroup.GroupStop();]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="Xts">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Xts.ActivateTracksInMovers">
      <LineId Id="3" Count="3" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Xts.Cycle">
      <LineId Id="3" Count="15" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Xts.DisableXTS">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Xts.EnableXTS">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Xts.FB_Init">
      <LineId Id="3" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Xts.GetTMSMoverInterface">
      <LineId Id="3" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Xts.GetTrackByOCTID">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Xts.Initialise">
      <LineId Id="3" Count="58" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Xts.IsXtsIdle">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Xts.IsXtsReady">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Xts.MoverHomeSequence">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Xts.MyNumberOfParts.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Xts.MyNumberOfParts.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Xts.MyNumberOfTracks.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Xts.MyNumberOfTracks.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Xts.MyXts.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Xts.MyXts.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Xts.RegisterHardware">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Xts.RegisterMovers">
      <LineId Id="3" Count="15" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Xts.RegisterWithParent">
      <LineId Id="1" Count="1" />
    </LineIds>
    <LineIds Name="Xts.StopXts">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>