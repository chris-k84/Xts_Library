<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="CollisionGroup" Id="{8907fd76-d392-4030-a5c6-041188f5b990}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK CollisionGroup IMPLEMENTS I_Cyclic, I_CollisionGroup, I_Resettable, I_Object
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	stGroupInformation : CAGroupInfo;
	_caGroup : Tc3_McCoordinatedMotion.AXES_GROUP_REF;
	_ICaGroup : I_Mc2CaGroup;
	ReadGroupStatus : Tc3_McCoordinatedMotion.MC_GroupReadStatus;
	resetCAGroup : ResetGroup := (MyCollisionGroup := THIS^);
	enableCAGroup : EnableGroup := (MyCollisionGroup := THIS^);
	disableCAGroup : DisableGroup := (MyCollisionGroup := THIS^);
	addMover : AddMoverToGroupTask := (MyCollisionGroup := THIS^);
	removeAllAxes : RemoveAllMoverFromGroup := (MyCollisionGroup := THIS^);
	grpStop : StopMoverGroup := (MyCollisionGroup := THIS^);
	removeMover : RemoveMoverFromGroup(THIS^);
	_MyName: STRING;
	GroupMoverIdents : ARRAY[0..MaxMovers] OF IDENT_IN_GROUP_REF;
END_VAR
VAR CONSTANT
	MaxMovers : INT := 49;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[{analysis -2}]]></ST>
    </Implementation>
    <Folder Name="Commands" Id="{8586cf21-15e1-44d9-a164-c4e3c5e15810}" />
    <Folder Name="Status" Id="{f0a1ad0e-7de5-4634-834b-41b20fa92032}" />
    <Method Name="AddMoverToThisGroup" Id="{9f418b4e-0cf8-4b65-9d2d-7e6c1a46690c}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD AddMoverToThisGroup : HRESULT
VAR_INPUT
	MoverToAdd : I_XtsMover;
END_VAR
VAR
	i : INT;
	Registered : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// FOR i := 0 TO MaxMovers DO
// 	IF GroupMoverIdents[i] = MoverToAdd.IdentInGroup THEN
// 		registered := TRUE;
// 	END_IF
// END_FOR
IF (*NOT registered AND*) NOT addMover.Busy THEN
	addMover.AddMover(MoverToAdd := MoverToAdd);
	MoverToAdd.MyCAGroup  := THIS^;
//	FOR i := 0 TO MaxMovers DO
//		IF GroupMoverIdents[i] =  UDINT_TO_IDENTINGROUP(0) THEN
			//GroupMoverIdents[i] := MoverToAdd.IdentInGroup;
//		END_IF
//	END_FOR
ELSE
	AddMoverToThisGroup := -1;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Property Name="CAGroupXtsIoEnvInterface" Id="{212be6c7-141f-4d0f-8757-6216cdee75b6}">
      <Declaration><![CDATA[PROPERTY CAGroupXtsIoEnvInterface : I_Mc2CaGroup]]></Declaration>
      <Get Name="Get" Id="{58823424-db7c-4e8e-8355-ea0d3f334737}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[CAGroupXtsIoEnvInterface := _ICaGroup;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{4e382846-3fb7-428a-a6d3-609bca8b4701}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_ICaGroup := CAGroupXtsIoEnvInterface;
IF _ICaGroup <> 0 THEN
	_MyName := _ICaGroup.P_ObjectName;
END_IF]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Cycle" Id="{6b3cc58f-cb00-45fb-b855-5eb19dbaab5d}">
      <Declaration><![CDATA[METHOD Cycle : HRESULT
VAR
	ResetCaGroupResult : HRESULT;
	EnableCaGroupResult : HRESULT;
	DisableCaGroupResult : HRESULT;
	AddMoverCallResult: HRESULT;
	RemoveAllCycleResult: HRESULT;
	GrpStopCycleResult: HRESULT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _ICaGroup <> 0 THEN
	ReadGroupStatus(
	AxesGroup:= _caGroup, 
	Enable:= TRUE );
	ResetCaGroupResult := resetCAGroup.Cycle();
	EnableCaGroupResult := enableCAGroup.Cycle();
	DisableCaGroupResult := disableCAGroup.Cycle();
	AddMoverCallResult := addMover.Cycle();
	RemoveAllCycleResult := removeAllAxes.Cycle();
	GrpStopCycleResult := grpStop.Cycle();
	removeMover.Cycle();
	
	//Cyclic get CaGroup information
	stGroupInformation.sName := 'MainCAGroup';
	stGroupInformation.eGroupState := _caGroup.NcToPlc.Common.GroupStatus.State;
	stGroupInformation.nAxesCount	:= UDINT_TO_INT(_caGroup.NcToPlc.Common.GroupAxesCount);
	stGroupInformation.nId			:= _caGroup.NcToPlc.Common.GroupOID;	
	Cycle := 1;
ELSE
	Cycle := -1;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Disable" Id="{236769ac-ee48-442c-86de-25258567af7c}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD Disable : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT disableCAGroup.Busy THEN
	disableCAGroup.Execute();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Enable" Id="{9a19e9ba-2611-4357-a3d4-698f998ad87d}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD Enable : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT enableCAGroup.Busy THEN
	enableCAGroup.Execute();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetAxisCount" Id="{45b9081d-ba05-41c5-b1b6-c67859faca98}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD GetAxisCount : udint
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetAxisCount := _caGroup.NcToPlc.Common.GroupAxesCount;]]></ST>
      </Implementation>
    </Method>
    <Property Name="GroupRef" Id="{05d388ea-a899-4954-b35a-8298ecb26dd6}" FolderPath="Status\">
      <Declaration><![CDATA[PROPERTY GroupRef : reference to AXES_GROUP_REF]]></Declaration>
      <Get Name="Get" Id="{9960c5ab-7079-4a22-9f43-e4d1a1a5992b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[GroupRef REF= _caGroup;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="GroupState" Id="{a7850ad8-4f08-4a22-bf4c-efbfd8c96cf5}" FolderPath="Status\">
      <Declaration><![CDATA[PROPERTY GroupState : CAGroupStatus]]></Declaration>
      <Get Name="Get" Id="{51b877d1-f5c7-479f-9b28-cdb51e8876b7}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF ReadGroupStatus.GroupDisabled THEN
	GroupState := CAGroupStatus.mcGroupStateDisabled;
ELSIF ReadGroupStatus.GroupErrorStop THEN
	GroupState := CAGroupStatus.mcGroupStateErrorStop;
ELSIF ReadGroupStatus.GroupHoming THEN
	GroupState := CAGroupStatus.mcGroupStateHoming;
ELSIF ReadGroupStatus.GroupMoving THEN
	GroupState := CAGroupStatus.mcGroupStateMoving;
ELSIF ReadGroupStatus.GroupNotReady THEN
	GroupState := CAGroupStatus.mcGroupStateNotReady;
ELSIF ReadGroupStatus.GroupStandby THEN
	GroupState := CAGroupStatus.mcGroupStateStandby;
ELSIF ReadGroupStatus.GroupStopping THEN
	GroupState := CAGroupStatus.mcGroupStateStopping;
ELSIF ReadGroupStatus.Error THEN
	GroupState := CAGroupStatus.mcGroupError;
END_IF]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="GroupStop" Id="{96e619f0-ba68-4e46-ba5e-bd7a0dcefde6}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD GroupStop : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT grpStop.Busy THEN
	GroupStop := 2;
	grpStop.Execute();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="MyName" Id="{e6811d98-40d4-4440-8374-6ce3386e7963}" FolderPath="Status\">
      <Declaration><![CDATA[PROPERTY MyName : string]]></Declaration>
      <Get Name="Get" Id="{e4b2e201-13a7-44e4-888f-38c692b30d08}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MyName := _MyName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="RegisterWithParent" Id="{0f4efa96-221e-4b5f-b62b-0cd9b26287ac}">
      <Declaration><![CDATA[METHOD RegisterWithParent
VAR_INPUT
	Runner	: I_HostObjects;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Runner.RegisterCyclic(THIS^);]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveAllMovers" Id="{72daaa8f-92d0-4f12-b8f9-45742cf249d6}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD RemoveAllMovers : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT removeAllAxes.Busy THEN
	removeAllAxes.RemoveAllMover();
	RemoveAllMovers := 2;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveAMover" Id="{c380af90-39ac-42df-b7a5-a3aab3a831b8}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD RemoveAMover : BOOL
VAR_INPUT
	moverId : UDINT;
END_VAR
VAR
	i : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT removeMover.Busy THEN
	removeMover.Execute(moverid);
// 	FOR i := 0 TO MaxMovers DO
// 		IF GroupMoverIdents[i] = UDINT_TO_IDENTINGROUP(moverId) THEN
// 			GroupMoverIdents[i] := UDINT_TO_IDENTINGROUP(0);
// 		END_IF
// 	END_FOR
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="{109a65fd-df03-46ac-84a7-fd0107d964ee}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD Reset : HRESULT
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT resetCAGroup.Busy THEN
	resetCAGroup.Execute();
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>