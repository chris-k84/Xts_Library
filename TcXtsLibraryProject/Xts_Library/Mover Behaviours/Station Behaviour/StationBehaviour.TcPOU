<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="StationBehaviour" Id="{50af290e-a0d7-45b3-a647-c8828b096bd1}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK StationBehaviour IMPLEMENTS I_Cyclic, I_Resettable, I_Object
VAR
	State : StationBehaviourState;  
	CurrentStation : UINT;
	TargetStationPosition : MC_LREAL;
	_MoverVelocity : MC_LREAL := 1000.0;
	stSequenceInfo : StationBehaviourInfo;
	StationNumber : INT;
	StationArray : ARRAY[0..19] OF I_Station;
	Process : IProcess;
	ThisMover : I_XtsMover;
	ExecuteSequence : BOOL;
	_startPosition : MC_LREAL;
	_XtsNoHome : BOOL;
	_NonModuloMoves : BOOL := FALSE;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[{analysis -2}]]></ST>
    </Implementation>
    <Method Name="Cycle" Id="{0bc270b2-0e7a-4545-b872-87f2d15ca3f5}">
      <Declaration><![CDATA[METHOD PUBLIC Cycle : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE State OF
	StationBehaviourState.Init:
		IF ThisMover.isMoverEnabled() THEN
			State := StationBehaviourState.Available;
		END_IF
		
	StationBehaviourState.Available:
		IF ExecuteSequence THEN
			State := StationBehaviourState.MovingToStart;
		END_IF
		
	StationBehaviourState.MovingToStart:
		IF ThisMover.isMoverAtPosition(position := _startPosition) OR _XtsNoHome THEN
			State := StationBehaviourState.AtStart;
		END_IF
			
	StationBehaviourState.AtStart:
		IF StationArray[CurrentStation] <> 0 THEN
			IF SUCCEEDED(ThisMover.MoveTo(RequiredPosition := StationArray[CurrentStation].Position,
								MoveVelocity := _MoverVelocity,
								NonModuloMove := _NonModuloMoves)) THEN
								
				TargetStationPosition := StationArray[CurrentStation].Position;
				State := StationBehaviourState.MovingToStation;
			END_IF
		END_IF

	StationBehaviourState.MovingToStation:
		IF ThisMover.isMoverStationary() THEN 
			IF ThisMover.isMoverAtPosition(TargetStationPosition) THEN
				IF __QUERYINTERFACE(StationArray[CurrentStation],Process) THEN
					State := StationBehaviourState.AtProcess;
				ELSE
					State := StationBehaviourState.AtStation;
				END_IF
				StationArray[CurrentStation].MyMover(ThisMover);
			ELSE
				State := StationBehaviourState.QueuedAtStation;
			END_IF
		END_IF
		
	StationBehaviourState.QueuedAtStation:
		IF NOT ThisMover.isMoverStationary() THEN
				State := StationBehaviourState.MovingToStation;
		END_IF

	StationBehaviourState.AtStation:
		IF StationArray[CurrentStation].isComplete() THEN
			State := StationBehaviourState.GetNextMove;
		END_IF

	StationBehaviourState.AtProcess:
		ThisMover.MoveTo(RequiredPosition := Process.EndPosition,
								MoveVelocity := Process.ProcessVelocity,
								NonModuloMove := _NonModuloMoves);
		State := StationBehaviourState.InProcess;
								
	StationBehaviourState.InProcess:
		IF ThisMover.isMoverStationary() THEN 
			IF ThisMover.isMoverAtPosition(Process.EndPosition) THEN
				State := StationBehaviourState.GetNextMove;
			END_IF
		END_IF
	
	StationBehaviourState.GetNextMove:
		IF CurrentStation = StationNumber - 1 THEN
			CurrentStation := 0; 
			IF SUCCEEDED(ThisMover.MoveTo(RequiredPosition := StationArray[CurrentStation].Position,
							MoveVelocity := _MoverVelocity,
							NonModuloMove := _NonModuloMoves)) THEN
				State := StationBehaviourState.MovingToStation;
				TargetStationPosition := StationArray[CurrentStation].Position;
			END_IF
		ELSE
			State := StationBehaviourState.GoToNextStation;
		END_IF
		
	StationBehaviourState.GoToNextStation:
		TargetStationPosition := StationArray[CurrentStation + 1].Position;
		IF 	SUCCEEDED(ThisMover.MoveTo(RequiredPosition := TargetStationPosition,
							MoveVelocity := _MoverVelocity,
							NonModuloMove := _NonModuloMoves)) THEN	
			CurrentStation := CurrentStation + 1;
			State := StationBehaviourState.MovingToStation;
		END_IF	

	StationBehaviourState.Stopping:
		State := StationBehaviourState.Available;
		CurrentStation := 0;
		TargetStationPosition := 0.0;
	ELSE
		Cycle := E_FAIL;
END_CASE

//Cyclic update info data
stSequenceInfo.CurrentStation := UINT_TO_INT(CurrentStation);
stSequenceInfo.MoverId := ThisMover.AxisRef.NcToPlc.AxisId;
stSequenceInfo.State := State;
stSequenceInfo.Velocity := ThisMover.AxisRef.NcToPlc.ActVelo;]]></ST>
      </Implementation>
    </Method>
    <Property Name="MoverVelocity" Id="{4f2224ad-0534-4bd9-a8e4-5b63b7e53b5c}">
      <Declaration><![CDATA[PROPERTY MoverVelocity : mc_lreal]]></Declaration>
      <Get Name="Get" Id="{0bf3cfa6-cc44-4232-989f-70bced017a55}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MoverVelocity := _MoverVelocity;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{a9bdfb5a-ef56-4b9e-9f78-288684e24d6c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_MoverVelocity := MoverVelocity;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="MyMover" Id="{d0dbd650-93c6-4e7f-a733-abc40a2f12bf}">
      <Declaration><![CDATA[PROPERTY MyMover : I_XtsMover]]></Declaration>
      <Get Name="Get" Id="{52e46adf-1b9f-404f-a8d7-de686d91d4ef}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MyMover := ThisMover;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{a9693a81-065c-4ba2-8a99-3606c71cf06a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ThisMover := MyMover;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="MyStartPosition" Id="{30ed087d-d896-49f8-aaff-c511c0d55a71}">
      <Declaration><![CDATA[PROPERTY MyStartPosition : MC_LREAL]]></Declaration>
      <Get Name="Get" Id="{ebcb0d89-302c-4f5d-86e5-f5e15f136ea5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MyStartPosition := _startPosition;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{57b76837-f6ca-44d6-8033-7a2d9ee3e944}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_startPosition := MyStartPosition;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="RegisterAStation" Id="{14d9a1a8-6162-46e7-9803-61945cdf77e8}">
      <Declaration><![CDATA[METHOD RegisterAStation : HRESULT
VAR_INPUT
	Station : I_Station;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Station = 0 THEN
	RegisterAStation  := -1;
	RETURN;
END_IF
StationArray[StationNumber] := Station;
StationNumber := StationNumber + 1;]]></ST>
      </Implementation>
    </Method>
    <Method Name="RegisterWithParent" Id="{4ad7e011-f71b-4cbe-b657-57f840858ed2}">
      <Declaration><![CDATA[METHOD RegisterWithParent
VAR_INPUT
	Runner	: I_HostObjects;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Runner.RegisterCyclic(THIS^);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="{01dd3306-e903-4754-85c4-ea13c41e0b8c}">
      <Declaration><![CDATA[METHOD Reset : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[State := StationBehaviourState.Available;
CurrentStation := 0;
TargetStationPosition := 0.0;
stSequenceInfo.CurrentStation := UINT_TO_INT(CurrentStation);
stSequenceInfo.MoverId := ThisMover.AxisRef.NcToPlc.AxisId;
stSequenceInfo.State := State;
stSequenceInfo.Velocity := ThisMover.AxisRef.NcToPlc.ActVelo;
ExecuteSequence := FALSE;
Reset := 1;]]></ST>
      </Implementation>
    </Method>
    <Method Name="StartIndexing" Id="{6e4b7f28-1f53-404c-b56b-f1310c888415}">
      <Declaration><![CDATA[METHOD StartIndexing : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ExecuteSequence := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="XtsNoHome" Id="{7aad9af3-71dc-4b8d-9a2b-19016c2a644b}">
      <Declaration><![CDATA[PROPERTY XtsNoHome : BOOL]]></Declaration>
      <Get Name="Get" Id="{d3413585-01ef-4909-a612-e4cda3a7b8e0}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[XtsNoHome := _XtsNoHome;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{ca6f67d3-9265-4c0f-849c-5e4c98f82e9b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_XtsNoHome := XtsNoHome;]]></ST>
        </Implementation>
      </Set>
    </Property>
  </POU>
</TcPlcObject>