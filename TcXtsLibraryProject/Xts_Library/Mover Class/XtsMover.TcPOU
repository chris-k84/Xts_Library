<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="XtsMover" Id="{f9a43ed2-0578-4aed-857c-1a3adef0c7f6}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK XtsMover IMPLEMENTS I_Cyclic, I_XtsMover, I_Resettable, I_Object
VAR
	MyAxisRef : AXIS_REF;
	_MyAxisStatus : ST_AxisStatus;
	_MyNCData : NCTOPLC_AXIS_REF;
	TaskCollection : ObjectRunner;
	EnableBehaviour : EnableDisableTask := (AxisRef := MyAxisRef);
	MoveBehaviour : MoveToPositionTask:= (AxisRef := MyAxisRef, Gap := 100.0);
	HaltBehaviour : HaltMoverTask := (AxisRef := MyAxisRef);
	ResetBehaviour : CoEResetTask := (AxisRef := MyAxisRef);
	MoverActivateTrackBehaviour : ActivateTrackTask:= (AxisRef := MyAxisRef);
	_ipTcIoXtsMover	: I_TcIoXtsXpuMover;
	TrackChangeTrigger : R_TRIG;
	_MoverAbsMoveOptions : ST_MoveAbsoluteCAOptions;
	_stTmsActPositions : ST_PositionInfo;
	_CurrentTrack : I_XtsTrack;
	_MyCAGroup : I_CollisionGroup;
	_ForwardOnly : BOOL := TRUE;
	myControllerOid: OTCID;
	MyId: UDINT;
	Initialised : BOOL;
	MyTrackCount : INT;
	MyTracks : ARRAY[0..MaxTracks] OF I_XtsTrack;
	NullTrack : XtsTrack;
	_SetForce: LREAL;
	_SetCurrent: LREAL;
	_IsActive: BOOL;
	_Gap : LREAL;
	_Acceleration : LREAL;
	_Deceleration : LREAL;
	_Jerk : LREAL;
	AvoidingCollision: BOOL;
	myController: Tc3_XTS_Utility.I_McXtsMoverController;
END_VAR
VAR CONSTANT
	_MaxMoverVelocity : MC_LREAL := 4000.0;
	MaxTracks : INT := 5;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Administration" Id="{660864df-8996-42d7-8e95-bfca1c90696e}" />
    <Folder Name="Commands" Id="{db0a893b-cc1a-482e-a432-7e9d568c5112}" />
    <Folder Name="Dynamics" Id="{6b49cc7a-c913-475a-9f9a-db91d65d07e1}" />
    <Folder Name="ICyclic" Id="{895ad701-1670-4c6d-921e-cd7ccab0c12a}" />
    <Folder Name="Status" Id="{b27ba391-8a3b-4e51-ae24-bae43a7b6e5f}" />
    <Property Name="Acceleration" Id="{5cd04126-8ceb-4f9d-a4c5-c87e7e11d0e6}" FolderPath="Dynamics\">
      <Declaration><![CDATA[PROPERTY PUBLIC Acceleration : MC_LREAL]]></Declaration>
      <Get Name="Get" Id="{89c9e6d0-5dfa-4531-97de-32e16eb2e196}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Acceleration := MoveBehaviour.Acceleration;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{95cc2e62-d911-4757-83d0-b9b38a36fdde}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MoveBehaviour.Acceleration := Acceleration;
_Acceleration := Acceleration;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="ActivateTrack" Id="{f7604675-5338-4e11-9132-b17d5df72cc8}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD ActivateTrack : HRESULT
VAR_INPUT
	Track : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Track = 0 THEN
	ActivateTrack := -1;
	RETURN;
END_IF
IF MoverActivateTrackBehaviour.Busy THEN
	ActivateTrack := -2;
	RETURN;
END_IF

IF NOT THIS^.isMoverStationary() THEN
	ActivateTrack := -3;
	RETURN;
END_IF

IF Track > MyTrackCount THEN
	ActivateTrack := -4;
	RETURN;
END_IF

IF MyTracks[Track - 1].MyOTCID = 0  THEN
	ActivateTrack := -5;
	RETURN;
END_IF
	
MoverActivateTrackBehaviour.Execute(Track := MyTracks[Track - 1]);
_CurrentTrack := MyTracks[Track - 1];
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ActivateZeroReferenceSystem" Id="{f593e12a-c440-483d-8309-49c5dc48d5f1}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD ActivateZeroReferenceSystem : HRESULT]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF MoverActivateTrackBehaviour.Busy THEN
	ActivateZeroReferenceSystem := -1;
	RETURN;
END_IF
IF NOT THIS^.isMoverStationary() THEN
	ActivateZeroReferenceSystem := -2;
	RETURN;
END_IF 

MoverActivateTrackBehaviour.Execute(Track := NullTrack);
_CurrentTrack := 0;]]></ST>
      </Implementation>
    </Method>
    <Property Name="AxisRef" Id="{a7d5ea1d-51bb-4c87-90b3-db66fd196d20}" FolderPath="Administration\">
      <Declaration><![CDATA[PROPERTY AxisRef : Reference to Axis_ref]]></Declaration>
      <Get Name="Get" Id="{8c3b00e4-86fb-42e3-b0e0-5789e5045419}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[AxisRef REF= MyAxisRef;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Cycle" Id="{b5956233-12ba-4cb8-805f-5693aec42bed}" FolderPath="ICyclic\">
      <Declaration><![CDATA[METHOD PUBLIC  Cycle : HRESULT
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Initialised THEN
	TaskCollection.Cycle();
	TrackChangeTrigger(CLK := MoverActivateTrackBehaviour.Done);
	IF TrackChangeTrigger.Q THEN
		_MoverAbsMoveOptions.PositionReferenceSystem :=  MoverActivateTrackBehaviour.NewTrackId;
		_MoverAbsMoveOptions.DynamicsReferenceSystem := MoverActivateTrackBehaviour.NewTrackId;
		MoveBehaviour.Options := _MoverAbsMoveOptions;	
	END_IF
	IF _ipTcIoXtsMover <> 0 THEN
		_stTmsActPositions := _ipTcIoXtsMover.GetPositionInfo();
		_SetForce := _ipTcIoXtsMover.GetSetForce();
		_SetCurrent := _ipTcIoXtsMover.GetSetCurrent();
		_IsActive := _ipTcIoXtsMover.GetIsActive();
	END_IF
	AvoidingCollision := MyAxisRef.NcToPlc.StateDWord2.Flags.AvoidingCollision;
ELSE
	Cycle := -1;
END_IF
MyAxisRef.ReadStatus();
_MyNCData := MyAxisRef.NcToPlc;
_MyAxisStatus := MyAxisRef.Status;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Deceleration" Id="{3def2bbc-f7ec-4120-acb9-2ff2a2789bd5}" FolderPath="Dynamics\">
      <Declaration><![CDATA[PROPERTY PUBLIC Deceleration : MC_LREAL]]></Declaration>
      <Get Name="Get" Id="{e6097884-8279-4e20-92f9-6fb8b5120af4}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Deceleration := MoveBehaviour.Deceleration;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{dbf3cf03-c8db-40c9-ab3e-669bb5cdced1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MoveBehaviour.Deceleration := Deceleration;
HaltBehaviour.Deceleration := Deceleration;
_Deceleration := Deceleration;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="DisableMover" Id="{a82f95fa-77b4-4c5e-ae67-686dbd3b2d8d}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD PUBLIC DisableMover : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT THIS^.isMoverEnabled() THEN
	DisableMover := -1;
	RETURN;
END_IF
	
EnableBehaviour.Disable();]]></ST>
      </Implementation>
    </Method>
    <Method Name="EnableMover" Id="{d130fe63-f34a-4455-8bb8-4dfcc482e573}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD PUBLIC EnableMover : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF EnableBehaviour.Busy THEN
	EnableMover := -1;
	RETURN;
END_IF
IF THIS^.isMoverEnabled() THEN
	EnableMover := -2;
	RETURN;
END_IF
	
EnableBehaviour.Enable();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_Init" Id="{e6cdc000-5fb3-42ba-8ce8-01408a72b06f}" FolderPath="Administration\">
      <Declaration><![CDATA[//FB_Init is always available implicitly and it is used primarily for initialization.
//The return value is not evaluated. For a specific influence, you can also declare the
//methods explicitly and provide additional code there with the standard initialization
//code. You can evaluate the return value.
METHOD FB_Init: BOOL
VAR_INPUT
    bInitRetains: BOOL; // TRUE: the retain variables are initialized (reset warm / reset cold)
    bInCopyCode: BOOL;  // TRUE: the instance will be copied to the copy code afterward (online change)   
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TaskCollection.RegisterModule(EnableBehaviour);
TaskCollection.RegisterModule(ResetBehaviour);
TaskCollection.RegisterModule(HaltBehaviour);
TaskCollection.RegisterModule(MoveBehaviour);
TaskCollection.RegisterModule(MoverActivateTrackBehaviour);]]></ST>
      </Implementation>
    </Method>
    <Property Name="Gap" Id="{dd72da9d-fc94-421a-8ee7-a84a721dd20c}" FolderPath="Dynamics\">
      <Declaration><![CDATA[PROPERTY PUBLIC Gap : MC_LREAL]]></Declaration>
      <Get Name="Get" Id="{5c8fd02d-70e7-4f46-b386-6000a46a3487}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Gap := MoveBehaviour.Gap;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{280f9258-e1cd-43be-bf57-16929cbbc8d6}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF Gap >= 50.0 THEN
	MoveBehaviour.Gap := Gap;
	HaltBehaviour.Gap := Gap;
	_Gap := Gap;
ELSE
	Gap := 100.0;
END_IF
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="GetActiveTrackLength" Id="{4b840da8-e3cc-46e4-bf3c-0fcb89870f67}" FolderPath="Administration\">
      <Declaration><![CDATA[METHOD GetActiveTrackLength : LREAL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetActiveTrackLength := _CurrentTrack.TrackLength;]]></ST>
      </Implementation>
    </Method>
    <Method Name="getActPosition" Id="{4178e4b5-2100-4520-ae0f-21e86c6aadb1}" FolderPath="Status\">
      <Declaration><![CDATA[METHOD getActPosition : LREAL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[getActPosition := MyAxisRef.NcToPlc.ActPos;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="getActVelocity" Id="{0c1e39cc-a9a3-4a7e-885e-348eec34ac14}" FolderPath="Status\">
      <Declaration><![CDATA[METHOD getActVelocity : LREAL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[getActVelocity := MyAxisRef.NcToPlc.ActVelo;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="getErrorID" Id="{5ba2965f-231a-47cc-bcc5-dfd172bd6d02}" FolderPath="Status\">
      <Declaration><![CDATA[METHOD getErrorID : udint
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[getErrorID := _MyAxisStatus.ErrorID;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetMoverCtrlOTCID" Id="{6852d0c0-13fb-4a6d-9e8b-5d538e770d2f}" FolderPath="Administration\">
      <Declaration><![CDATA[METHOD GetMoverCtrlOTCID : XtsMoverControllerOTCID
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetMoverCtrlOTCID := _ipTcIoXtsMover.P_MoverControllerOid;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetMoverOTCID" Id="{0ee3ade7-076c-46ec-8833-0ad2fc45f400}" FolderPath="Administration\">
      <Declaration><![CDATA[METHOD GetMoverOTCID : OTCID
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//GetMoverCtrlOTCID := _ipTcIoXtsMover.P_AxisOid;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="getTrackPosition" Id="{7d5a975d-08c0-41e2-b667-ea0e7fe80524}" FolderPath="Status\">
      <Declaration><![CDATA[METHOD getTrackPosition : LREAL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[getTrackPosition := _stTmsActPositions.fTrackPosition;]]></ST>
      </Implementation>
    </Method>
    <Method Name="HaltAxis" Id="{b177db81-8e99-498a-a7a2-cd0938dd7a2c}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD PUBLIC HaltAxis : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF HaltBehaviour.Busy THEN
	HaltAxis := -1;
	RETURN;
END_IF
	
HaltBehaviour.Execute();]]></ST>
      </Implementation>
    </Method>
    <Method Name="hasError" Id="{6d2c5795-b984-4bf0-9ad4-9c8de694c1dd}" FolderPath="Status\">
      <Declaration><![CDATA[METHOD hasError : bool
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[hasError := _MyAxisStatus.Error;]]></ST>
      </Implementation>
    </Method>
    <Property Name="IdentInGroup" Id="{4d5563a0-634a-4074-a0e4-612875dd790c}" FolderPath="Administration\">
      <Declaration><![CDATA[PROPERTY PUBLIC IdentInGroup : IDENT_IN_GROUP_REF]]></Declaration>
      <Get Name="Get" Id="{6419a53d-e416-464a-881c-e300db0a9add}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IdentInGroup := UDINT_TO_IDENTINGROUP(id := _MyNCData.AxisId);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Initialise" Id="{158eaadb-7779-40c3-b4d7-ef64750e6b36}" FolderPath="Administration\">
      <Declaration><![CDATA[METHOD Initialise : HRESULT
VAR_INPUT
END_VAR
VAR
	i : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Initialised THEN
	Initialise := -1;
	RETURN;
END_IF
IF _ipTcIoXtsMover = 0 THEN
	Initialise := -2;
	RETURN;
END_IF
IF NOT isMoverDetected() THEN
	Initialise := -3;
	RETURN;
END_IF
IF MyTrackCount = 0 THEN
	Initialise := -4;
	RETURN;
END_IF
myController := _ipTcIoXtsMover.MoverController;
myControllerOid := _ipTcIoXtsMover.P_MoverControllerOid;
MyId := _ipTcIoXtsMover.GetAxisId();
_CurrentTrack := MyTracks[MoversActiveTrack - 1];
Initialised := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsActive" Id="{4093fe18-48a9-45f2-9701-210b5183f8f4}" FolderPath="Status\">
      <Declaration><![CDATA[METHOD IsActive : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IsActive := _IsActive;]]></ST>
      </Implementation>
    </Method>
    <Method Name="isMoverAtPosition" Id="{f1a74560-cd92-4fa6-83a2-3bacea608337}" FolderPath="Status\">
      <Declaration><![CDATA[METHOD PUBLIC isMoverAtPosition : BOOL
VAR_INPUT
	Position : MC_LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _CurrentTrack <> 0 THEN
	IF Position > 1 THEN
		IF _stTmsActPositions.fTrackPosition < position + 1 AND _stTmsActPositions.fTrackPosition > position - 1 THEN
			isMoverAtPosition := TRUE;
		ELSE
			isMoverAtPosition := FALSE;
		END_IF  
	ELSE
		IF _stTmsActPositions.fTrackPosition < position + 1 AND _stTmsActPositions.fTrackPosition > 0.0  
			OR _stTmsActPositions.fTrackPosition < _CurrentTrack.TrackLength AND _stTmsActPositions.fTrackPosition > _CurrentTrack.TrackLength - 1 THEN
			isMoverAtPosition := TRUE;
		ELSE
			isMoverAtPosition := FALSE;
		END_IF
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="isMoverDetected" Id="{c1a5811f-71c0-458a-bf03-7bfa946db86b}" FolderPath="Status\">
      <Declaration><![CDATA[METHOD PUBLIC isMoverDetected : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[isMoverDetected := MyAxisRef.NcToPlc.AxisId <> 0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="isMoverEnabled" Id="{7f5530a3-9bf6-4669-8c7b-76814da68801}" FolderPath="Status\">
      <Declaration><![CDATA[METHOD PUBLIC isMoverEnabled : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[isMoverEnabled :=  NOT _MyAxisStatus.Disabled;]]></ST>
      </Implementation>
    </Method>
    <Method Name="isMoverStationary" Id="{64b09804-b6c0-46e5-9180-be650a88cf77}" FolderPath="Status\">
      <Declaration><![CDATA[METHOD PUBLIC isMoverStationary : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[isMoverStationary := _MyAxisStatus.NotMoving;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Jerk" Id="{fbc5f504-aa6b-48f8-8a62-bbde3b74b20e}" FolderPath="Dynamics\">
      <Declaration><![CDATA[PROPERTY PUBLIC Jerk : MC_LREAL]]></Declaration>
      <Get Name="Get" Id="{98c0c9db-aae6-4788-a223-2bf5fa007418}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Jerk := MoveBehaviour.Jerk;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{6a6a16a3-4f19-4f4d-bd8d-8441ae3b5cf2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MoveBehaviour.Jerk := Jerk;
HaltBehaviour.Jerk := Jerk;
_Jerk := Jerk;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="MoverErrorID" Id="{9a24b894-1b02-4293-95b1-831b38fd5fad}" FolderPath="Status\">
      <Declaration><![CDATA[PROPERTY PUBLIC MoverErrorID : DWORD]]></Declaration>
      <Get Name="Get" Id="{01f9b7c9-0e41-48f0-a5f9-8a7a495677b0}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MoverErrorID := _MyAxisStatus.ErrorID;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="MoversActiveTrack" Id="{15471ba0-8341-48c7-a2d0-01ca6286078a}" FolderPath="Status\">
      <Declaration><![CDATA[PROPERTY PUBLIC MoversActiveTrack : INT]]></Declaration>
      <Get Name="Get" Id="{2721855b-e1d8-4f74-a352-28794ee4ae69}">
        <Declaration><![CDATA[VAR
	i : INT;
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[FOR i := 0 TO MyTrackCount - 1 DO
	IF MyTracks[i].MyOTCID =  _ipTcIoXtsMover.GetActiveTrackObjectId() THEN
		MoversActiveTrack := i + 1;
		EXIT;
	END_IF
END_FOR]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="MoverXtsIoEnvInterface" Id="{6aaf98f4-e1bc-4f35-afbe-48664404e767}" FolderPath="Administration\">
      <Declaration><![CDATA[PROPERTY PUBLIC MoverXtsIoEnvInterface : I_TcIoXtsXpuMover]]></Declaration>
      <Get Name="Get" Id="{5b75808a-7c24-4c09-8809-4a555d5acdb1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MoverXtsIoEnvInterface := _ipTcIoXtsMover;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{57119448-dfbf-405e-ade1-72aad5224720}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_ipTcIoXtsMover := MoverXtsIoEnvInterface;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="MoveTo" Id="{ea6488b0-fefd-4f9f-a3b2-cfd8c6f64d05}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD PUBLIC MoveTo : HRESULT
VAR_INPUT
	RequiredPosition : MC_LREAL;
	MoveVelocity : MC_LREAL;
	NonModuloMove : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF MoveBehaviour.Busy THEN
	MoveTo := -1;
	RETURN;
END_IF
IF MoveVelocity > _MaxMoverVelocity THEN
	MoveTo := -2;
	RETURN;
END_IF
IF MoveVelocity <= 0.0 THEN
	MoveTo := -3;
	RETURN;
END_IF
IF Gap <= 50.0 THEN
	MoveTo := -4;
	RETURN;
END_IF

IF NonModuloMove THEN
	THIS^.MoveBehaviour.MoveTo(Position := RequiredPosition, 
									Velocity := MoveVelocity, 
									Direction := Tc3_Mc3Definitions.MC_DIRECTION.mcDirectionNonModulo, 
									Turns := 0);
	MoveTo := 1;
END_IF

IF NOT NonModuloMove AND _ForwardOnly THEN
	MoveTo := THIS^.MoveBehaviour.MoveTo(Position := RequiredPosition, 
									Velocity := MoveVelocity, 
									Direction := Tc3_Mc3Definitions.MC_DIRECTION.mcDirectionPositive, 
									Turns := 0);
	MoveTo := 2;
END_IF

IF NOT NonModuloMove AND NOT _ForwardOnly THEN
	IF RequiredPosition > MyAxisRef.NcToPlc.ModuloActPos THEN
		MoveTo := THIS^.MoveBehaviour.MoveTo(Position := RequiredPosition, 
									Velocity := MoveVelocity, 
									Direction := Tc3_Mc3Definitions.MC_DIRECTION.mcDirectionPositive, 
									Turns := 0);
		MoveTo := 3;
	ELSE
		MoveTo := THIS^.MoveBehaviour.MoveTo(Position := RequiredPosition, 
									Velocity := MoveVelocity, 
									Direction := Tc3_Mc3Definitions.MC_DIRECTION.mcDirectionNegative, 
									Turns := 0);
		MoveTo := 4;
	END_IF
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Property Name="MyCAGroup" Id="{ef4ebc28-e3bd-4e4a-8472-4104ad14ebae}" FolderPath="Administration\">
      <Declaration><![CDATA[PROPERTY MyCAGroup : I_CollisionGroup]]></Declaration>
      <Get Name="Get" Id="{d4b3e253-6981-43ac-859c-776f6b4fec7d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MyCAGroup := _MyCAGroup;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{54c77228-8f9c-4310-9bfc-ef466b7143ba}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_MyCAGroup := MyCAGroup;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="PositiveDirectionOnly" Id="{993fe16b-05a5-4eca-a38c-6463f3e7295c}" FolderPath="Administration\">
      <Declaration><![CDATA[PROPERTY PositiveDirectionOnly : BOOL]]></Declaration>
      <Get Name="Get" Id="{581a1e54-141a-440c-9d85-39be9d6e8e36}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[PositiveDirectionOnly := _ForwardOnly;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{aede2ad8-809d-4697-b667-b49152253954}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_ForwardOnly := PositiveDirectionOnly;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="RegisterTracks" Id="{33623a4f-6a2b-45ed-b81c-64a295cf1295}" FolderPath="Administration\">
      <Declaration><![CDATA[METHOD RegisterTracks : HRESULT
VAR_INPUT
	Track : I_XtsTrack;
END_VAR
VAR
	Registered : BOOL;
	i : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Track = 0 THEN
	RegisterTracks := -1;
	RETURN;
END_IF
Registered := FALSE;
FOR i := 0 TO 5 DO 
	IF Track = MyTracks[i] THEN
		Registered := TRUE;
	END_IF
END_FOR
IF Registered THEN
	RegisterTracks := -2;
	RETURN;
END_IF
FOR i := 0 TO 5 DO
	IF MyTracks[i] = 0 THEN
		MyTracks[i] := Track;
		MyTrackCount := MyTrackCount + 1;
		EXIT;
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="RegisterWithParent" Id="{0c8fc6cb-d807-4926-a588-870aa525c7f2}" FolderPath="Administration\">
      <Declaration><![CDATA[METHOD RegisterWithParent
VAR_INPUT
	Runner	: I_HostObjects;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Runner.RegisterCyclic(THIS^);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="{e9d8249c-2f88-4980-a483-ceda82c7ab80}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD PUBLIC Reset : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ResetBehaviour.Busy THEN
	Reset := -1;
	RETURN;
END_IF
 
IF NOT (_MyAxisStatus.Error OR _MyAxisStatus.NotMoving) THEN
	Reset := -2;
	RETURN;
END_IF

ResetBehaviour.Reset();
MoveBehaviour.Abort();]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetForceCouple" Id="{655fe1cd-78c7-4097-b5c7-b05e68cd5f7e}" FolderPath="Administration\">
      <Declaration><![CDATA[METHOD SetForceCouple : HRESULT
VAR_INPUT
	XtsMoverCtrlOTCID : Tc3_XTS_Utility.XtsMoverControllerOTCID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _ipTcIoXtsMover = 0 THEN
	SetForceCouple := - 1;
	RETURN;
END_IF

_ipTcIoXtsMover.MoverController.SetForceCouple(nForceCouple := XtsMoverCtrlOTCID);]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetParameterSet" Id="{a2d3312c-642a-4ded-95b4-a250a99284ac}" FolderPath="Administration\">
      <Declaration><![CDATA[METHOD SetParameterSet : HRESULT
VAR_INPUT
	ParameterSet : OTCID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ParameterSet = 0 THEN
	RETURN;
	SetParameterSet := -1;
END_IF

myController.SetDefaultParameterSet(ParameterSet);]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetSimDetectionPartAndPosition" Id="{7c9e452d-fc91-446a-83ce-0915a34e15cf}" FolderPath="Administration\">
      <Declaration><![CDATA[METHOD SetSimDetectionPartAndPosition : BOOL
VAR_INPUT
	Part : OTCID;
	Position : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_ipTcIoXtsMover.SetSimulatedStartUpPart(Part);
_ipTcIoXtsMover.SetSimulatedStartUpPosition(Position);]]></ST>
      </Implementation>
    </Method>
    <Method Name="SwapMover" Id="{075d081f-a4ad-470f-95aa-ced1f28cc5a8}" FolderPath="Administration\">
      <Declaration><![CDATA[METHOD SwapMover : HRESULT
VAR_INPUT
    MoverToSwapWith : MoverOTCID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_ipTcIoXtsMover.swapmover(nSwapMoverObjectId := MoverToSwapWith);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TriggerMoverArrive" Id="{9bb7f072-ab21-4ec2-9434-ad1366cf5fb7}" FolderPath="Administration\">
      <Declaration><![CDATA[METHOD TriggerMoverArrive : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _ipTcIoXtsMover = 0 THEN
	TriggerMoverArrive := - 1;
	RETURN;
END_IF
IF _IsActive THEN
	TriggerMoverArrive := - 2;
	RETURN;
END_IF

_ipTcIoXtsMover.TriggerArrive();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TriggerMoverLeave" Id="{074e60e5-1df3-46d8-92fd-930fc05fcb13}" FolderPath="Administration\">
      <Declaration><![CDATA[METHOD TriggerMoverLeave : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _ipTcIoXtsMover = 0 THEN
	TriggerMoverLeave := -1;
	RETURN;
END_IF
IF NOT _IsActive THEN
	TriggerMoverLeave := -2;
	RETURN;
END_IF
IF NOT isMoverStationary() THEN
	TriggerMoverLeave := -3;
	RETURN;
END_IF

_ipTcIoXtsMover.TriggerLeave();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>